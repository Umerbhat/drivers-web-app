{
    "sourceFile": "src/App.test.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1642933997528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642948745314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,12 @@\n import { store } from './store';\n import App from './App';\n \n test('renders learn react link', () => {\n-  const { getByText } = render(\n+  const { getByTestId } = render(\n     <Provider store={store}>\n       <App />\n     </Provider>\n   );\n \n-  expect(getByText(/learn/i)).toBeInTheDocument();\n+  expect(getByTestId('app')).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642948789690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,7 @@\n     <Provider store={store}>\n       <App />\n     </Provider>\n   );\n-\n+  // test if app runs without crash\n   expect(getByTestId('app')).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642949568964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,16 @@\n import { render } from '@testing-library/react';\n import { Provider } from 'react-redux';\n import { store } from './store';\n import App from './App';\n+import { BrowserRouter } from 'react-router-dom';\n \n test('renders learn react link', () => {\n   const { getByTestId } = render(\n     <Provider store={store}>\n+      <BrowserRouter>\n       <App />\n+      </BrowserRouter>\n     </Provider>\n   );\n   // test if app runs without crash\n   expect(getByTestId('app')).toBeInTheDocument();\n"
                },
                {
                    "date": 1642960492449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,20 @@\n import { store } from './store';\n import App from './App';\n import { BrowserRouter } from 'react-router-dom';\n \n+beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n+  fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"Barcelona\"}]));\n+})\n+\n test('renders learn react link', () => {\n-  const { getByTestId } = render(\n+  const { getByTestId, getByText } = render(\n     <Provider store={store}>\n       <BrowserRouter>\n       <App />\n       </BrowserRouter>\n     </Provider>\n   );\n   // test if app runs without crash\n   expect(getByTestId('app')).toBeInTheDocument();\n+  expect(getByText(/barcelona/))\n });\n"
                },
                {
                    "date": 1642960588286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n   fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"Barcelona\"}]));\n })\n \n-test('renders learn react link', () => {\n+test('renders homepage without crash', () => {\n   const { getByTestId, getByText } = render(\n     <Provider store={store}>\n       <BrowserRouter>\n       <App />\n@@ -18,6 +18,6 @@\n     </Provider>\n   );\n   // test if app runs without crash\n   expect(getByTestId('app')).toBeInTheDocument();\n-  expect(getByText(/barcelona/))\n+  expect(getByText(/barcelona/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642960598292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,6 @@\n     </Provider>\n   );\n   // test if app runs without crash\n   expect(getByTestId('app')).toBeInTheDocument();\n-  expect(getByText(/barcelona/)).toBeInTheDocument();\n+  expect(getByText(/Barcelona/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642961416795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,45 @@\n-import React from 'react';\n-import { render } from '@testing-library/react';\n-import { Provider } from 'react-redux';\n-import { store } from './store';\n-import App from './App';\n-import { BrowserRouter } from 'react-router-dom';\n+import React from \"react\";\n+import { render } from \"@testing-library/react\";\n+import { Provider } from \"react-redux\";\n+import App from \"./App\";\n+import { BrowserRouter } from \"react-router-dom\";\n+import configureStore from \"redux-mock-store\";\n+import {\n+  FETCH_DELIVERY,\n+  FETCH_DELIVERY_LIST,\n+  POST_DELIVERY_STATUS,\n+} from \"./features/deliveryTracker/state/constants\";\n+import { TDeliveryListState } from \"./features/deliveryTracker/state/types\";\n \n-beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"Barcelona\"}]));\n-})\n+beforeEach(() => {\n+  // if you have an existing `beforeEach` just add the following lines to it\n+  fetchMock.mockResponseOnce(\n+    JSON.stringify([{ id: \"4\", address: \"Barcelona\" }])\n+  );\n+});\n \n-test('renders homepage without crash', () => {\n+test(\"renders homepage without crash\", () => {\n+  const reduxState = {\n+    deliveryTracker: {\n+      data: { ids: [], entities: {} },\n+      apiStatus: {\n+        [FETCH_DELIVERY_LIST]: \"idle\",\n+        [FETCH_DELIVERY]: \"idle\",\n+        [POST_DELIVERY_STATUS]: \"idle\",\n+      },\n+      activeDeliveryId: null,\n+    },\n+  };\n+  const mockStore = configureStore<TDeliveryListState>();\n+  const store = mockStore(reduxState);\n   const { getByTestId, getByText } = render(\n     <Provider store={store}>\n       <BrowserRouter>\n-      <App />\n+        <App />\n       </BrowserRouter>\n     </Provider>\n   );\n   // test if app runs without crash\n-  expect(getByTestId('app')).toBeInTheDocument();\n+  expect(getByTestId(\"app\")).toBeInTheDocument();\n   expect(getByText(/Barcelona/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642961716874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { Provider } from \"react-redux\";\n import App from \"./App\";\n import { BrowserRouter } from \"react-router-dom\";\n import configureStore from \"redux-mock-store\";\n+import { getDefaultMiddleware } from '@reduxjs/toolkit'\n import {\n   FETCH_DELIVERY,\n   FETCH_DELIVERY_LIST,\n   POST_DELIVERY_STATUS,\n@@ -29,9 +30,10 @@\n       },\n       activeDeliveryId: null,\n     },\n   };\n-  const mockStore = configureStore<TDeliveryListState>();\n+  const middlewares = getDefaultMiddleware();\n+  const mockStore = configureStore<TDeliveryListState>(middlewares);\n   const store = mockStore(reduxState);\n   const { getByTestId, getByText } = render(\n     <Provider store={store}>\n       <BrowserRouter>\n"
                },
                {
                    "date": 1642961740057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,15 +11,8 @@\n   POST_DELIVERY_STATUS,\n } from \"./features/deliveryTracker/state/constants\";\n import { TDeliveryListState } from \"./features/deliveryTracker/state/types\";\n \n-beforeEach(() => {\n-  // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockResponseOnce(\n-    JSON.stringify([{ id: \"4\", address: \"Barcelona\" }])\n-  );\n-});\n-\n test(\"renders homepage without crash\", () => {\n   const reduxState = {\n     deliveryTracker: {\n       data: { ids: [], entities: {} },\n"
                },
                {
                    "date": 1642961773356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,19 @@\n   POST_DELIVERY_STATUS,\n } from \"./features/deliveryTracker/state/constants\";\n import { TDeliveryListState } from \"./features/deliveryTracker/state/types\";\n \n+beforeEach(() => {\n+  // if you have an existing `beforeEach` just add the following lines to it\n+  fetchMock.mockResponseOnce(\n+    JSON.stringify([])\n+  );\n+});\n+\n test(\"renders homepage without crash\", () => {\n   const reduxState = {\n     deliveryTracker: {\n-      data: { ids: [], entities: {} },\n+      data: { ids: [\"4\"], entities: {\"4\": { id: \"4\", address: \"Barcelona\" }} },\n       apiStatus: {\n         [FETCH_DELIVERY_LIST]: \"idle\",\n         [FETCH_DELIVERY]: \"idle\",\n         [POST_DELIVERY_STATUS]: \"idle\",\n"
                },
                {
                    "date": 1642961870380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { Provider } from \"react-redux\";\n import App from \"./App\";\n import { BrowserRouter } from \"react-router-dom\";\n import configureStore from \"redux-mock-store\";\n-import { getDefaultMiddleware } from '@reduxjs/toolkit'\n+import { getDefaultMiddleware } from \"@reduxjs/toolkit\";\n import {\n   FETCH_DELIVERY,\n   FETCH_DELIVERY_LIST,\n   POST_DELIVERY_STATUS,\n@@ -13,17 +13,18 @@\n import { TDeliveryListState } from \"./features/deliveryTracker/state/types\";\n \n beforeEach(() => {\n   // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockResponseOnce(\n-    JSON.stringify([])\n-  );\n+  fetchMock.mockResponseOnce(JSON.stringify([]));\n });\n \n test(\"renders homepage without crash\", () => {\n   const reduxState = {\n     deliveryTracker: {\n-      data: { ids: [\"4\"], entities: {\"4\": { id: \"4\", address: \"Barcelona\" }} },\n+      data: {\n+        ids: [\"4\"],\n+        entities: { \"4\": { id: \"4\", address: \"Barcelona\", zipCode: \"089879\" } },\n+      },\n       apiStatus: {\n         [FETCH_DELIVERY_LIST]: \"idle\",\n         [FETCH_DELIVERY]: \"idle\",\n         [POST_DELIVERY_STATUS]: \"idle\",\n"
                },
                {
                    "date": 1642962319552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,10 @@\n   FETCH_DELIVERY_LIST,\n   POST_DELIVERY_STATUS,\n } from \"./features/deliveryTracker/state/constants\";\n import { TDeliveryListState } from \"./features/deliveryTracker/state/types\";\n+import userEvent from \"@testing-library/user-event\";\n \n-beforeEach(() => {\n-  // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockResponseOnce(JSON.stringify([]));\n-});\n \n test(\"renders homepage without crash\", () => {\n   const reduxState = {\n     deliveryTracker: {\n@@ -33,9 +30,9 @@\n     },\n   };\n   const middlewares = getDefaultMiddleware();\n   const mockStore = configureStore<TDeliveryListState>(middlewares);\n-  const store = mockStore(reduxState);\n+  const store = mockStore(reduxState as any);\n   const { getByTestId, getByText } = render(\n     <Provider store={store}>\n       <BrowserRouter>\n         <App />\n@@ -45,4 +42,33 @@\n   // test if app runs without crash\n   expect(getByTestId(\"app\")).toBeInTheDocument();\n   expect(getByText(/Barcelona/)).toBeInTheDocument();\n });\n+\n+test(\"click on list item navigates to details page\", () => {\n+  const reduxState = {\n+    deliveryTracker: {\n+      data: {\n+        ids: [\"4\"],\n+        entities: { \"4\": { id: \"4\", address: \"Barcelona\", zipCode: \"089879\" } },\n+      },\n+      apiStatus: {\n+        [FETCH_DELIVERY_LIST]: \"idle\",\n+        [FETCH_DELIVERY]: \"idle\",\n+        [POST_DELIVERY_STATUS]: \"idle\",\n+      },\n+      activeDeliveryId: null,\n+    },\n+  };\n+  const middlewares = getDefaultMiddleware();\n+  const mockStore = configureStore<TDeliveryListState>(middlewares);\n+  const store = mockStore(reduxState as any);\n+  const { getByTestId, getByText } = render(\n+    <Provider store={store}>\n+      <BrowserRouter>\n+        <App />\n+      </BrowserRouter>\n+    </Provider>\n+  );\n+  // Click on list item\n+  userEvent.click(getByText(/Barcelona/))\n+});\n"
                },
                {
                    "date": 1642962396354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,5 +70,6 @@\n     </Provider>\n   );\n   // Click on list item\n   userEvent.click(getByText(/Barcelona/))\n+  expect(getByText(/Make active/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962436912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,6 +70,6 @@\n     </Provider>\n   );\n   // Click on list item\n   userEvent.click(getByText(/Barcelona/))\n-  expect(getByText(/Make active/)).toBeInTheDocument();\n+  expect(getByText(/Make Active/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962515237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,6 +70,10 @@\n     </Provider>\n   );\n   // Click on list item\n   userEvent.click(getByText(/Barcelona/))\n-  expect(getByText(/Make Active/)).toBeInTheDocument();\n+  // Navigates to details page\n+  const makeActiveButton = getByText(/Make Active/)\n+  expect(makeActiveButton).toBeInTheDocument();\n+  // click on make active\n+  userEvent.click(makeActiveButton)\n });\n"
                },
                {
                    "date": 1642962607628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,6 +74,8 @@\n   // Navigates to details page\n   const makeActiveButton = getByText(/Make Active/)\n   expect(makeActiveButton).toBeInTheDocument();\n   // click on make active\n-  userEvent.click(makeActiveButton)\n+  userEvent.click(makeActiveButton);\n+  // check if active label is visible\n+  expect(getByText(/active/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962662825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,6 +76,6 @@\n   expect(makeActiveButton).toBeInTheDocument();\n   // click on make active\n   userEvent.click(makeActiveButton);\n   // check if active label is visible\n-  expect(getByText(/active/)).toBeInTheDocument();\n+  expect(getByText(/Active/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962737102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,5 +77,9 @@\n   // click on make active\n   userEvent.click(makeActiveButton);\n   // check if active label is visible\n   expect(getByText(/Active/)).toBeInTheDocument();\n+  // click on mark as delivered\n+  userEvent.click(getByText(/Mark Delivered/));\n+  // check if active label is visible\n+  expect(getByText(/delivered/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962832748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,11 +75,12 @@\n   const makeActiveButton = getByText(/Make Active/)\n   expect(makeActiveButton).toBeInTheDocument();\n   // click on make active\n   userEvent.click(makeActiveButton);\n-  // check if active label is visible\n-  expect(getByText(/Active/)).toBeInTheDocument();\n-  // click on mark as delivered\n-  userEvent.click(getByText(/Mark Delivered/));\n-  // check if active label is visible\n-  expect(getByText(/delivered/)).toBeInTheDocument();\n+  console.log(store.getState(),\"popo\")\n+  // // check if active label is visible\n+  // expect(getByText(/Active/)).toBeInTheDocument();\n+  // // click on mark as delivered\n+  // userEvent.click(getByText(/Mark Delivered/));\n+  // // check if active label is visible\n+  // expect(getByText(/delivered/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962962854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,14 +73,5 @@\n   userEvent.click(getByText(/Barcelona/))\n   // Navigates to details page\n   const makeActiveButton = getByText(/Make Active/)\n   expect(makeActiveButton).toBeInTheDocument();\n-  // click on make active\n-  userEvent.click(makeActiveButton);\n-  console.log(store.getState(),\"popo\")\n-  // // check if active label is visible\n-  // expect(getByText(/Active/)).toBeInTheDocument();\n-  // // click on mark as delivered\n-  // userEvent.click(getByText(/Mark Delivered/));\n-  // // check if active label is visible\n-  // expect(getByText(/delivered/)).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962990223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n } from \"./features/deliveryTracker/state/constants\";\n import { TDeliveryListState } from \"./features/deliveryTracker/state/types\";\n import userEvent from \"@testing-library/user-event\";\n \n-\n test(\"renders homepage without crash\", () => {\n   const reduxState = {\n     deliveryTracker: {\n       data: {\n@@ -69,9 +68,9 @@\n       </BrowserRouter>\n     </Provider>\n   );\n   // Click on list item\n-  userEvent.click(getByText(/Barcelona/))\n+  userEvent.click(getByText(/Barcelona/));\n   // Navigates to details page\n-  const makeActiveButton = getByText(/Make Active/)\n+  const makeActiveButton = getByText(/Make Active/);\n   expect(makeActiveButton).toBeInTheDocument();\n });\n"
                },
                {
                    "date": 1642962996966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n   };\n   const middlewares = getDefaultMiddleware();\n   const mockStore = configureStore<TDeliveryListState>(middlewares);\n   const store = mockStore(reduxState as any);\n-  const { getByTestId, getByText } = render(\n+  const { getByText } = render(\n     <Provider store={store}>\n       <BrowserRouter>\n         <App />\n       </BrowserRouter>\n"
                }
            ],
            "date": 1642933997528,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { render } from '@testing-library/react';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  const { getByText } = render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n\n  expect(getByText(/learn/i)).toBeInTheDocument();\n});\n"
        }
    ]
}