{
    "sourceFile": "src/features/deliveries/state/actions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1642838591614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642838598595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n-import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n-import { RootState, AppThunk } from '../../../store';\n-import { fetchDeliveries } from '../../../api';\n+import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n import { incrementAsync } from './middleware';\n import { initialState } from './reducer';\n \n export const deliveriesSlice = createSlice({\n"
                },
                {
                    "date": 1642843959398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,18 @@\n import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n import { incrementAsync } from './middleware';\n-import { initialState } from './reducer';\n \n+export interface DeliveriesState {\n+    value: number;\n+    status: 'idle' | 'loading' | 'failed';\n+  }\n+  \n+  export const initialState: DeliveriesState = {\n+    value: 0,\n+    status: 'idle',\n+  };\n+  \n+\n export const deliveriesSlice = createSlice({\n   name: 'counter',\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n"
                },
                {
                    "date": 1642844264225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,4 @@\n-import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n-import { incrementAsync } from './middleware';\n+import { deliveriesSlice } from \"./reducer\";\n \n-export interface DeliveriesState {\n-    value: number;\n-    status: 'idle' | 'loading' | 'failed';\n-  }\n-  \n-  export const initialState: DeliveriesState = {\n-    value: 0,\n-    status: 'idle',\n-  };\n-  \n \n-export const deliveriesSlice = createSlice({\n-  name: 'counter',\n-  initialState,\n-  // The `reducers` field lets us define reducers and generate associated actions\n-  reducers: {\n-    increment: (state) => {\n-      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n-      // doesn't actually mutate the state because it uses the Immer library,\n-      // which detects changes to a \"draft state\" and produces a brand new\n-      // immutable state based off those changes\n-      state.value += 1;\n-    },\n-    decrement: (state) => {\n-      state.value -= 1;\n-    },\n-    // Use the PayloadAction type to declare the contents of `action.payload`\n-    incrementByAmount: (state, action: PayloadAction<number>) => {\n-      state.value += action.payload;\n-    },\n-  },\n-  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n-  // including actions generated by createAsyncThunk or in other slices.\n-  extraReducers: (builder) => {\n-    builder\n-      .addCase(incrementAsync.pending, (state) => {\n-        state.status = 'loading';\n-      })\n-      .addCase(incrementAsync.fulfilled, (state, action) => {\n-        state.status = 'idle';\n-        state.value += action.payload;\n-      });\n-  },\n-});\n-\n export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642845568040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,2 @@\n-import { deliveriesSlice } from \"./reducer\";\n-\n-\n-export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n+export const FETCH_DELIVERIES = \"deliveries/fetchAllDeliveries\";\n+export const FETCH_DELIVERY = \"deliveries/fetchDelivery\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642849668159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n-export const FETCH_DELIVERIES = \"deliveries/fetchAllDeliveries\";\n-export const FETCH_DELIVERY = \"deliveries/fetchDelivery\"\n\\ No newline at end of file\n+export const FETCH_DELIVERIES = \"deliveries/data/fetchAllDeliveries\";\n+export const FETCH_DELIVERY = \"deliveries/data/fetchDelivery\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642849695903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n-export const FETCH_DELIVERIES = \"deliveries/data/fetchAllDeliveries\";\n-export const FETCH_DELIVERY = \"deliveries/data/fetchDelivery\"\n\\ No newline at end of file\n+export const FETCH_DELIVERIES = \"deliveries/fetchAllDeliveries\";\n+export const FETCH_DELIVERY = \"deliveries/fetchDelivery\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1642925239163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,3 @@\n export const FETCH_DELIVERIES = \"deliveries/fetchAllDeliveries\";\n-export const FETCH_DELIVERY = \"deliveries/fetchDelivery\"\n\\ No newline at end of file\n+export const FETCH_DELIVERY = \"deliveries/fetchDelivery\"\n+export const POST_DELIVERY_STATUS = \"deliveries/postDeliveryStatus\"\n\\ No newline at end of file\n"
                }
            ],
            "date": 1642838591614,
            "name": "Commit-0",
            "content": "import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../../store';\nimport { fetchDeliveries } from '../../../api';\nimport { incrementAsync } from './middleware';\nimport { initialState } from './reducer';\n\nexport const deliveriesSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n"
        }
    ]
}