{
    "sourceFile": "src/features/deliveries/state/reducer.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1642838547342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642838802097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n import { RootState, AppThunk } from '../../../store';\n import { fetchDeliveries } from '../../../api';\n+import { deliveriesSlice } from './actions';\n \n export interface DeliveriesState {\n   value: number;\n   status: 'idle' | 'loading' | 'failed';\n@@ -25,58 +26,5 @@\n     return response.data;\n   }\n );\n \n-export const deliveriesSlice = createSlice({\n-  name: 'counter',\n-  initialState,\n-  // The `reducers` field lets us define reducers and generate associated actions\n-  reducers: {\n-    increment: (state) => {\n-      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n-      // doesn't actually mutate the state because it uses the Immer library,\n-      // which detects changes to a \"draft state\" and produces a brand new\n-      // immutable state based off those changes\n-      state.value += 1;\n-    },\n-    decrement: (state) => {\n-      state.value -= 1;\n-    },\n-    // Use the PayloadAction type to declare the contents of `action.payload`\n-    incrementByAmount: (state, action: PayloadAction<number>) => {\n-      state.value += action.payload;\n-    },\n-  },\n-  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n-  // including actions generated by createAsyncThunk or in other slices.\n-  extraReducers: (builder) => {\n-    builder\n-      .addCase(incrementAsync.pending, (state) => {\n-        state.status = 'loading';\n-      })\n-      .addCase(incrementAsync.fulfilled, (state, action) => {\n-        state.status = 'idle';\n-        state.value += action.payload;\n-      });\n-  },\n-});\n-\n-export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n-\n-// The function below is called a selector and allows us to select a value from\n-// the state. Selectors can also be defined inline where they're used instead of\n-// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n-export const selectCount = (state: RootState) => state.counter.value;\n-\n-// We can also write thunks by hand, which may contain both sync and async logic.\n-// Here's an example of conditionally dispatching actions based on current state.\n-export const incrementIfOdd = (amount: number): AppThunk => (\n-  dispatch,\n-  getState\n-) => {\n-  const currentValue = selectCount(getState());\n-  if (currentValue % 2 === 1) {\n-    dispatch(incrementByAmount(amount));\n-  }\n-};\n-\n export default deliveriesSlice.reducer;\n"
                },
                {
                    "date": 1642843948285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,9 @@\n-import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n+import { createAsyncThunk } from '@reduxjs/toolkit';\n import { RootState, AppThunk } from '../../../store';\n import { fetchDeliveries } from '../../../api';\n import { deliveriesSlice } from './actions';\n \n-export interface DeliveriesState {\n-  value: number;\n-  status: 'idle' | 'loading' | 'failed';\n-}\n-\n-export const initialState: DeliveriesState = {\n-  value: 0,\n-  status: 'idle',\n-};\n-\n // The function below is called a thunk and allows us to perform async logic. It\n // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n // will call the thunk with the `dispatch` function as the first argument. Async\n // code can then be executed and other actions can be dispatched. Thunks are\n"
                },
                {
                    "date": 1642844144544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,2 @@\n-import { createAsyncThunk } from '@reduxjs/toolkit';\n-import { RootState, AppThunk } from '../../../store';\n-import { fetchDeliveries } from '../../../api';\n import { deliveriesSlice } from './actions';\n-\n-// The function below is called a thunk and allows us to perform async logic. It\n-// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n-// will call the thunk with the `dispatch` function as the first argument. Async\n-// code can then be executed and other actions can be dispatched. Thunks are\n-// typically used to make async requests.\n-export const incrementAsync = createAsyncThunk(\n-  'counter/fetchCount',\n-  async (amount: number) => {\n-    const response = await fetchDeliveries(amount);\n-    // The value we return becomes the `fulfilled` action payload\n-    return response.data;\n-  }\n-);\n-\n export default deliveriesSlice.reducer;\n"
                },
                {
                    "date": 1642844252944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,49 @@\n-import { deliveriesSlice } from './actions';\n+import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n+import { incrementAsync } from './middleware';\n+\n+export interface DeliveriesState {\n+    value: number;\n+    status: 'idle' | 'loading' | 'failed';\n+  }\n+  \n+  export const initialState: DeliveriesState = {\n+    value: 0,\n+    status: 'idle',\n+  };\n+  \n+\n+export const deliveriesSlice = createSlice({\n+  name: 'counter',\n+  initialState,\n+  // The `reducers` field lets us define reducers and generate associated actions\n+  reducers: {\n+    increment: (state) => {\n+      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n+      // doesn't actually mutate the state because it uses the Immer library,\n+      // which detects changes to a \"draft state\" and produces a brand new\n+      // immutable state based off those changes\n+      state.value += 1;\n+    },\n+    decrement: (state) => {\n+      state.value -= 1;\n+    },\n+    // Use the PayloadAction type to declare the contents of `action.payload`\n+    incrementByAmount: (state, action: PayloadAction<number>) => {\n+      state.value += action.payload;\n+    },\n+  },\n+  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n+  // including actions generated by createAsyncThunk or in other slices.\n+  extraReducers: (builder) => {\n+    builder\n+      .addCase(incrementAsync.pending, (state) => {\n+        state.status = 'loading';\n+      })\n+      .addCase(incrementAsync.fulfilled, (state, action) => {\n+        state.status = 'idle';\n+        state.value += action.payload;\n+      });\n+  },\n+});\n+\n export default deliveriesSlice.reducer;\n"
                },
                {
                    "date": 1642844577857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,4 +46,6 @@\n   },\n });\n \n export default deliveriesSlice.reducer;\n+\n+export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642844634443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,5 +47,7 @@\n });\n \n export default deliveriesSlice.reducer;\n \n+// actions\n+\n export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642844646609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,6 +48,5 @@\n \n export default deliveriesSlice.reducer;\n \n // actions\n-\n export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642845176274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,23 @@\n import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n import { incrementAsync } from './middleware';\n \n export interface DeliveriesState {\n-    value: number;\n+    deliveries: Record<string, {\n+    id: string,\n+    address: string,\n+    city: string,\n+    zipCode: string,\n+    latitude: number,\n+    longitude: number,\n+    customer: string\n+    }>;\n     status: 'idle' | 'loading' | 'failed';\n   }\n   \n   export const initialState: DeliveriesState = {\n-    value: 0,\n-    status: 'idle',\n+    deliveries: {},\n+    deliveriesStatus: 'idle',\n   };\n   \n \n export const deliveriesSlice = createSlice({\n"
                },
                {
                    "date": 1642845571326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,37 @@\n-import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n-import { incrementAsync } from './middleware';\n+import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n+import { incrementAsync } from \"./middleware\";\n \n+type Status = \"idle\" | \"loading\" | \"failed\"\n+\n export interface DeliveriesState {\n-    deliveries: Record<string, {\n-    id: string,\n-    address: string,\n-    city: string,\n-    zipCode: string,\n-    latitude: number,\n-    longitude: number,\n-    customer: string\n-    }>;\n-    status: 'idle' | 'loading' | 'failed';\n-  }\n-  \n-  export const initialState: DeliveriesState = {\n-    deliveries: {},\n-    deliveriesStatus: 'idle',\n-  };\n-  \n+  deliveries: Record<\n+    string,\n+    {\n+      id: string;\n+      address: string;\n+      city: string;\n+      zipCode: string;\n+      latitude: number;\n+      longitude: number;\n+      customer: string;\n+    }\n+  >;\n+  deliveriesStatus: Status\n+  deliveryStatus: Status\n+  activeDelivery: null | string,\n+}\n \n+export const initialState: DeliveriesState = {\n+  deliveries: {},\n+  deliveriesStatus: \"idle\",\n+  deliveryStatus: \"idle\",\n+  activeDelivery: null\n+\n+};\n+\n export const deliveriesSlice = createSlice({\n-  name: 'counter',\n+  name: \"counter\",\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n     increment: (state) => {\n@@ -44,17 +53,18 @@\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n       .addCase(incrementAsync.pending, (state) => {\n-        state.status = 'loading';\n+        state.status = \"loading\";\n       })\n       .addCase(incrementAsync.fulfilled, (state, action) => {\n-        state.status = 'idle';\n+        state.status = \"idle\";\n         state.value += action.payload;\n       });\n   },\n });\n \n export default deliveriesSlice.reducer;\n \n // actions\n-export const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n+export const { increment, decrement, incrementByAmount } =\n+  deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642845819104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,30 +17,30 @@\n     }\n   >;\n   deliveriesStatus: Status\n   deliveryStatus: Status\n-  activeDelivery: null | string,\n+  activeDeliveryId: null | string,\n }\n \n export const initialState: DeliveriesState = {\n   deliveries: {},\n   deliveriesStatus: \"idle\",\n   deliveryStatus: \"idle\",\n-  activeDelivery: null\n+  activeDeliveryId: null\n \n };\n \n export const deliveriesSlice = createSlice({\n   name: \"counter\",\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n-    increment: (state) => {\n+    increment: (state, action: PayloadAction<number>) => {\n       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n       // doesn't actually mutate the state because it uses the Immer library,\n       // which detects changes to a \"draft state\" and produces a brand new\n       // immutable state based off those changes\n-      state.value += 1;\n+      state.activeDeliveryId = action.payload;\n     },\n     decrement: (state) => {\n       state.value -= 1;\n     },\n"
                },
                {
                    "date": 1642846921774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,25 @@\n-import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n-import { incrementAsync } from \"./middleware\";\n+import { createSlice, PayloadAction, createEntityAdapter } from \"@reduxjs/toolkit\";\n+import { getDeliveries } from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\"\n \n+export const deliveriesAdapter = createEntityAdapter()\n+\n export interface DeliveriesState {\n-  deliveries: Record<\n-    string,\n-    {\n-      id: string;\n-      address: string;\n-      city: string;\n-      zipCode: string;\n-      latitude: number;\n-      longitude: number;\n-      customer: string;\n-    }\n-  >;\n+  // deliveries: Record<\n+  //   string,\n+  //   {\n+  //     id: string;\n+  //     address: string;\n+  //     city: string;\n+  //     zipCode: string;\n+  //     latitude: number;\n+  //     longitude: number;\n+  //     customer: string;\n+  //   }\n+  // >;\n+  deliveries: usersAdapter\n   deliveriesStatus: Status\n   deliveryStatus: Status\n   activeDeliveryId: null | string,\n }\n@@ -28,38 +31,35 @@\n   activeDeliveryId: null\n \n };\n \n+\n export const deliveriesSlice = createSlice({\n-  name: \"counter\",\n+  name: \"deliveries\",\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n-    increment: (state, action: PayloadAction<number>) => {\n+    setActiveDelivery: (state, action: PayloadAction<string>) => {\n       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n       // doesn't actually mutate the state because it uses the Immer library,\n       // which detects changes to a \"draft state\" and produces a brand new\n       // immutable state based off those changes\n       state.activeDeliveryId = action.payload;\n     },\n-    decrement: (state) => {\n-      state.value -= 1;\n+    resetActiveDelivery: (state) => {\n+      state.activeDeliveryId = null;\n     },\n-    // Use the PayloadAction type to declare the contents of `action.payload`\n-    incrementByAmount: (state, action: PayloadAction<number>) => {\n-      state.value += action.payload;\n-    },\n   },\n   // The `extraReducers` field lets the slice handle actions defined elsewhere,\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n-      .addCase(incrementAsync.pending, (state) => {\n-        state.status = \"loading\";\n+      .addCase(getDeliveries.pending, (state) => {\n+        state.deliveriesStatus = \"loading\";\n       })\n-      .addCase(incrementAsync.fulfilled, (state, action) => {\n-        state.status = \"idle\";\n-        state.value += action.payload;\n+      .addCase(getDeliveries.fulfilled, (state: DeliveriesState, action) => {\n+        state.deliveriesStatus = \"idle\";\n+        deliveriesAdapter.upsertMany(state, action);\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642847188179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,38 +2,37 @@\n import { getDeliveries } from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\"\n \n-export const deliveriesAdapter = createEntityAdapter()\n-\n export interface DeliveriesState {\n-  // deliveries: Record<\n-  //   string,\n-  //   {\n-  //     id: string;\n-  //     address: string;\n-  //     city: string;\n-  //     zipCode: string;\n-  //     latitude: number;\n-  //     longitude: number;\n-  //     customer: string;\n-  //   }\n-  // >;\n-  deliveries: usersAdapter\n-  deliveriesStatus: Status\n+  data: Record<\n+    string,\n+    {\n+      id: string;\n+      address: string;\n+      city: string;\n+      zipCode: string;\n+      latitude: number;\n+      longitude: number;\n+      customer: string;\n+    }\n+  >;\n+  status: Status\n   deliveryStatus: Status\n   activeDeliveryId: null | string,\n }\n \n+\n+\n+export const deliveriesAdapter = createEntityAdapter();\n export const initialState: DeliveriesState = {\n-  deliveries: {},\n-  deliveriesStatus: \"idle\",\n+  data: {},\n+  status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null\n \n };\n \n-\n export const deliveriesSlice = createSlice({\n   name: \"deliveries\",\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n@@ -53,18 +52,18 @@\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n       .addCase(getDeliveries.pending, (state) => {\n-        state.deliveriesStatus = \"loading\";\n+        state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state: DeliveriesState, action) => {\n-        state.deliveriesStatus = \"idle\";\n+        state.status = \"idle\";\n         deliveriesAdapter.upsertMany(state, action);\n       });\n   },\n });\n \n export default deliveriesSlice.reducer;\n \n // actions\n-export const { increment, decrement, incrementByAmount } =\n+export const { } =\n   deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642847213782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state: DeliveriesState, action) => {\n         state.status = \"idle\";\n-        deliveriesAdapter.upsertMany(state, action);\n+        deliveriesAdapter.upsertMany(state, action.payload)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642847277485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,6 +64,6 @@\n \n export default deliveriesSlice.reducer;\n \n // actions\n-export const { } =\n+export const {setActiveDelivery, resetActiveDelivery } =\n   deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642847310106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state: DeliveriesState, action) => {\n         state.status = \"idle\";\n-        deliveriesAdapter.upsertMany(state, action.payload)\n+        deliveriesAdapter.upsertMany(state as any, action.payload)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642847317420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     builder\n       .addCase(getDeliveries.pending, (state) => {\n         state.status = \"loading\";\n       })\n-      .addCase(getDeliveries.fulfilled, (state: DeliveriesState, action) => {\n+      .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"idle\";\n         deliveriesAdapter.upsertMany(state as any, action.payload)\n       });\n   },\n"
                },
                {
                    "date": 1642847370155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"idle\";\n-        deliveriesAdapter.upsertMany(state as any, action.payload)\n+        deliveriesAdapter.upsertMany(state as any, action.payload as any)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642847909071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { createSlice, PayloadAction, createEntityAdapter } from \"@reduxjs/toolkit\";\n import { getDeliveries } from \"./middleware\";\n \n-type Status = \"idle\" | \"loading\" | \"failed\"\n+type Status = \"idle\" | \"loading\" | \"failed\" | 'success'\n \n export interface DeliveriesState {\n   data: Record<\n     string,\n@@ -55,9 +55,9 @@\n       .addCase(getDeliveries.pending, (state) => {\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n-        state.status = \"idle\";\n+        state.status = \"success\";\n         deliveriesAdapter.upsertMany(state as any, action.payload as any)\n       });\n   },\n });\n"
                },
                {
                    "date": 1642848958231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.upsertMany(state as any, action.payload as any)\n+        // deliveriesAdapter.upsertMany(state as any, action.payload as any)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642849500369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        // deliveriesAdapter.upsertMany(state as any, action.payload as any)\n+        deliveriesAdapter.setAll(state as any, action.payload as any)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642849578036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,11 @@\n }\n \n \n \n-export const deliveriesAdapter = createEntityAdapter();\n+export const deliveriesAdapter = createEntityAdapter<DeliveriesState['data']>();\n export const initialState: DeliveriesState = {\n-  data: {},\n+  data: deliveriesAdapter.getInitialState({}),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null\n \n"
                },
                {
                    "date": 1642849592469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n \n export const deliveriesAdapter = createEntityAdapter<DeliveriesState['data']>();\n export const initialState: DeliveriesState = {\n-  data: deliveriesAdapter.getInitialState({}),\n+  data: deliveriesAdapter.getInitialState({} as DeliveriesState['data']),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null\n \n"
                },
                {
                    "date": 1642849617518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.setAll(state as any, action.payload as any)\n+        deliveriesAdapter.setAll(state as any, action as any)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642849739606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.setAll(state as any, action as any)\n+        state.data = deliveriesAdapter.setAll(state as any, action as any)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642849779356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        state.data = deliveriesAdapter.setAll(state as any, action as any)\n+        deliveriesAdapter.setAll(state.data as any, action as any)\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642851850440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n-import { createSlice, PayloadAction, createEntityAdapter } from \"@reduxjs/toolkit\";\n+import {\n+  createSlice,\n+  PayloadAction,\n+  createEntityAdapter,\n+} from \"@reduxjs/toolkit\";\n import { getDeliveries } from \"./middleware\";\n \n-type Status = \"idle\" | \"loading\" | \"failed\" | 'success'\n+type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n \n export interface DeliveriesState {\n   data: Record<\n     string,\n@@ -15,22 +19,19 @@\n       longitude: number;\n       customer: string;\n     }\n   >;\n-  status: Status\n-  deliveryStatus: Status\n-  activeDeliveryId: null | string,\n+  status: Status;\n+  deliveryStatus: Status;\n+  activeDeliveryId: null | string;\n }\n \n-\n-\n-export const deliveriesAdapter = createEntityAdapter<DeliveriesState['data']>();\n+export const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\n export const initialState: DeliveriesState = {\n-  data: deliveriesAdapter.getInitialState({} as DeliveriesState['data']),\n+  data: deliveriesAdapter.getInitialState({} as DeliveriesState[\"data\"]),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n-  activeDeliveryId: null\n-\n+  activeDeliveryId: null,\n };\n \n export const deliveriesSlice = createSlice({\n   name: \"deliveries\",\n@@ -56,14 +57,14 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.setAll(state.data as any, action as any)\n+        deliveriesAdapter.upsertMany(state.data as any, action as any);\n       });\n   },\n });\n \n export default deliveriesSlice.reducer;\n \n // actions\n-export const {setActiveDelivery, resetActiveDelivery } =\n+export const { setActiveDelivery, resetActiveDelivery } =\n   deliveriesSlice.actions;\n"
                },
                {
                    "date": 1642853980353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,24 +2,17 @@\n   createSlice,\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n+import { DeliveryItem } from \"../types\";\n import { getDeliveries } from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n \n export interface DeliveriesState {\n   data: Record<\n     string,\n-    {\n-      id: string;\n-      address: string;\n-      city: string;\n-      zipCode: string;\n-      latitude: number;\n-      longitude: number;\n-      customer: string;\n-    }\n+    DeliveryItem\n   >;\n   status: Status;\n   deliveryStatus: Status;\n   activeDeliveryId: null | string;\n"
                },
                {
                    "date": 1642854015163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,14 @@\n \n type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n \n export interface DeliveriesState {\n-  data: Record<\n+  data: {\n+    ids: string[],\n+    entities: Record<\n     string,\n     DeliveryItem\n-  >;\n+  >};\n   status: Status;\n   deliveryStatus: Status;\n   activeDeliveryId: null | string;\n }\n"
                },
                {
                    "date": 1642861774168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n import { DeliveryItem } from \"../types\";\n-import { getDeliveries } from \"./middleware\";\n+import { getDeliveries, getDeliveryDetails } from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n \n export interface DeliveriesState {\n@@ -53,8 +53,15 @@\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n         deliveriesAdapter.upsertMany(state.data as any, action as any);\n+      })\n+      .addCase(getDeliveryDetails.pending, (state) => {\n+        state.deliveryStatus = \"loading\";\n+      })\n+      .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n+        state.deliveryStatus = \"success\";\n+        deliveriesAdapter.setOne(state.data as any, action as any);\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642862394407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.upsertMany(state.data as any, action as any);\n+        deliveriesAdapter.setAll(state.data as any, action as any);\n       })\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n"
                },
                {
                    "date": 1642862635473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n-        state.deliveryStatus = \"success\";\n+        state.deliveryStatus = \"idle\";\n         deliveriesAdapter.setOne(state.data as any, action as any);\n       });\n   },\n });\n"
                },
                {
                    "date": 1642862756492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,15 +54,22 @@\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n         deliveriesAdapter.setAll(state.data as any, action as any);\n       })\n+      .addCase(getDeliveries.rejected, (state, action) => {\n+        state.status = \"failed\";\n+      })\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n         state.deliveryStatus = \"idle\";\n         deliveriesAdapter.setOne(state.data as any, action as any);\n+      })\n+      .addCase(getDeliveryDetails.rejected, (state, action) => {\n+        state.deliveryStatus = \"failed\";\n       });\n+      ;\n   },\n });\n \n export default deliveriesSlice.reducer;\n"
                },
                {
                    "date": 1642925981628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n import { DeliveryItem } from \"../types\";\n-import { getDeliveries, getDeliveryDetails } from \"./middleware\";\n+import { getDeliveries, getDeliveryDetails, setDeliveryStatus } from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n \n export interface DeliveriesState {\n@@ -66,10 +66,19 @@\n         deliveriesAdapter.setOne(state.data as any, action as any);\n       })\n       .addCase(getDeliveryDetails.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n+      })\n+      .addCase(setDeliveryStatus.pending, (state) => {\n+        state.deliveryStatus = \"loading\";\n+      })\n+      .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n+        state.deliveryStatus = \"idle\";\n+        deliveriesAdapter.setOne(state.data as any, action as any);\n+      })\n+      .addCase(setDeliveryStatus.rejected, (state, action) => {\n+        state.deliveryStatus = \"failed\";\n       });\n-      ;\n   },\n });\n \n export default deliveriesSlice.reducer;\n"
                },
                {
                    "date": 1642926163002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,10 @@\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n         state.deliveryStatus = \"idle\";\n-        deliveriesAdapter.setOne(state.data as any, action as any);\n+        state.activeDeliveryId = null;\n+        // deliveriesAdapter.setOne(state.data as any, action as any);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n"
                },
                {
                    "date": 1642927984246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n       .addCase(setDeliveryStatus.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n+        console.log(action,\"action\")\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         // deliveriesAdapter.setOne(state.data as any, action as any);\n       })\n"
                },
                {
                    "date": 1642928151231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n   createSlice,\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n+import { TDeliveryItemDetails } from \"../../../api/types\";\n import { DeliveryItem } from \"../types\";\n import { getDeliveries, getDeliveryDetails, setDeliveryStatus } from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n@@ -12,9 +13,9 @@\n   data: {\n     ids: string[],\n     entities: Record<\n     string,\n-    DeliveryItem\n+    TDeliveryItemDetails\n   >};\n   status: Status;\n   deliveryStatus: Status;\n   activeDeliveryId: null | string;\n"
                },
                {
                    "date": 1642928156687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,21 @@\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n import { TDeliveryItemDetails } from \"../../../api/types\";\n import { DeliveryItem } from \"../types\";\n-import { getDeliveries, getDeliveryDetails, setDeliveryStatus } from \"./middleware\";\n+import {\n+  getDeliveries,\n+  getDeliveryDetails,\n+  setDeliveryStatus,\n+} from \"./middleware\";\n \n type Status = \"idle\" | \"loading\" | \"failed\" | \"success\";\n \n export interface DeliveriesState {\n   data: {\n-    ids: string[],\n-    entities: Record<\n-    string,\n-    TDeliveryItemDetails\n-  >};\n+    ids: string[];\n+    entities: Record<string, TDeliveryItemDetails>;\n+  };\n   status: Status;\n   deliveryStatus: Status;\n   activeDeliveryId: null | string;\n }\n@@ -72,9 +74,9 @@\n       .addCase(setDeliveryStatus.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n-        console.log(action,\"action\")\n+        console.log(action, \"action\");\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         // deliveriesAdapter.setOne(state.data as any, action as any);\n       })\n"
                },
                {
                    "date": 1642928486447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n import { TDeliveryItemDetails } from \"../../../api/types\";\n-import { DeliveryItem } from \"../types\";\n import {\n   getDeliveries,\n   getDeliveryDetails,\n   setDeliveryStatus,\n@@ -75,11 +74,15 @@\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n         console.log(action, \"action\");\n+        const status = action.meta.arg.status // Hack for API issue (not returning submitted data properly)\n+        const id = action.meta.arg.deliveryId // Hack for API issue (not returning submitted data properly)\n+        action.payload = {id,  status}\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n-        // deliveriesAdapter.setOne(state.data as any, action as any);\n+        \n+        deliveriesAdapter.updateOne(state.data as any, action as any);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n"
                },
                {
                    "date": 1642928551269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         action.payload = {id,  status}\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n-        deliveriesAdapter.updateOne(state.data as any, action as any);\n+        deliveriesAdapter.setOne(state.data as any, action as any);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n"
                },
                {
                    "date": 1642928625457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         action.payload = {id,  status}\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n-        deliveriesAdapter.setOne(state.data as any, action as any);\n+        deliveriesAdapter.updateOne(state.data as any, action as any);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n"
                },
                {
                    "date": 1642928733550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         action.payload = {id,  status}\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n-        deliveriesAdapter.updateOne(state.data as any, action as any);\n+        deliveriesAdapter.upsertOne(state.data as any, action as any);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n"
                },
                {
                    "date": 1642929022192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,11 +73,11 @@\n       .addCase(setDeliveryStatus.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n-        console.log(action, \"action\");\n-        const status = action.meta.arg.status // Hack for API issue (not returning submitted data properly)\n-        const id = action.meta.arg.deliveryId // Hack for API issue (not returning submitted data properly)\n+        // Hack for API issue (not returning submitted data properly)\n+        const status = action.meta.arg.status \n+        const id = action.meta.arg.deliveryId \n         action.payload = {id,  status}\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n"
                },
                {
                    "date": 1642929891280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.setAll(state.data as any, action as any);\n+        deliveriesAdapter.updateMany(state.data as any, action as any);\n       })\n       .addCase(getDeliveries.rejected, (state, action) => {\n         state.status = \"failed\";\n       })\n"
                },
                {
                    "date": 1642929904471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n-        deliveriesAdapter.updateMany(state.data as any, action as any);\n+        deliveriesAdapter.upsertMany(state.data as any, action as any);\n       })\n       .addCase(getDeliveries.rejected, (state, action) => {\n         state.status = \"failed\";\n       })\n"
                },
                {
                    "date": 1642930026604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n         state.status = \"loading\";\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n+        // TODO: use setAll when listing API has status as well\n         deliveriesAdapter.upsertMany(state.data as any, action as any);\n       })\n       .addCase(getDeliveries.rejected, (state, action) => {\n         state.status = \"failed\";\n"
                },
                {
                    "date": 1642930081003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n       .addCase(setDeliveryStatus.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n-        // Hack for API issue (not returning submitted data properly)\n+        // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n         const status = action.meta.arg.status \n         const id = action.meta.arg.deliveryId \n         action.payload = {id,  status}\n         state.deliveryStatus = \"idle\";\n"
                },
                {
                    "date": 1642930120175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,9 @@\n         // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n         const status = action.meta.arg.status \n         const id = action.meta.arg.deliveryId \n         action.payload = {id,  status}\n+        // hack ends\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n         deliveriesAdapter.upsertOne(state.data as any, action as any);\n"
                }
            ],
            "date": 1642838547342,
            "name": "Commit-0",
            "content": "import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../../store';\nimport { fetchDeliveries } from '../../../api';\n\nexport interface DeliveriesState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nexport const initialState: DeliveriesState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchDeliveries(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const deliveriesSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = deliveriesSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default deliveriesSlice.reducer;\n"
        }
    ]
}