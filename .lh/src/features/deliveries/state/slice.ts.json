{
    "sourceFile": "src/features/deliveries/state/slice.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1642935111447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642935248367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   deliveryStatus: TApiStatus;\n   activeDeliveryId: null | string;\n }\n \n-export const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\n+const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\n export const initialState: DeliveriesState = {\n   data: deliveriesAdapter.getInitialState({} as DeliveriesState[\"data\"]),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n"
                },
                {
                    "date": 1642935364255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,12 @@\n   deliveryStatus: TApiStatus;\n   activeDeliveryId: null | string;\n }\n \n+// Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\n+\n+\n export const initialState: DeliveriesState = {\n   data: deliveriesAdapter.getInitialState({} as DeliveriesState[\"data\"]),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n"
                },
                {
                    "date": 1642935444494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,21 +8,11 @@\n   getDeliveries,\n   getDeliveryDetails,\n   setDeliveryStatus,\n } from \"./middleware\";\n-import { TApiStatus } from \"./types\";\n+import { DeliveriesState } from \"./types\";\n \n \n-export interface DeliveriesState {\n-  data: {\n-    ids: string[];\n-    entities: Record<string, TDeliveryItemDetails>;\n-  };\n-  status: TApiStatus;\n-  deliveryStatus: TApiStatus;\n-  activeDeliveryId: null | string;\n-}\n-\n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\n \n \n"
                },
                {
                    "date": 1642935576678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,17 @@\n   getDeliveries,\n   getDeliveryDetails,\n   setDeliveryStatus,\n } from \"./middleware\";\n-import { DeliveriesState } from \"./types\";\n+import { TDeliveriesState } from \"./types\";\n \n \n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n-const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\n+const deliveriesAdapter = createEntityAdapter<TDeliveriesState[\"data\"]>();\n \n \n-export const initialState: DeliveriesState = {\n-  data: deliveriesAdapter.getInitialState({} as DeliveriesState[\"data\"]),\n+export const initialState: TDeliveriesState = {\n+  data: deliveriesAdapter.getInitialState({} as TDeliveriesState[\"data\"]),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n };\n"
                },
                {
                    "date": 1642935603406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n   createSlice,\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n-import { TDeliveryItemDetails } from \"../../../api/types\";\n import {\n   getDeliveries,\n   getDeliveryDetails,\n   setDeliveryStatus,\n"
                },
                {
                    "date": 1642935980013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n const deliveriesAdapter = createEntityAdapter<TDeliveriesState[\"data\"]>();\n \n \n export const initialState: TDeliveriesState = {\n-  data: deliveriesAdapter.getInitialState({} as TDeliveriesState[\"data\"]),\n+  data: deliveriesAdapter.getInitialState({}),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n };\n"
                },
                {
                    "date": 1642936323883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         state.status = \"success\";\n         // TODO: use setAll when listing API has status as well\n         deliveriesAdapter.upsertMany(state.data as any, action as any);\n       })\n-      .addCase(getDeliveries.rejected, (state, action) => {\n+      .addCase(getDeliveries.rejected, (state) => {\n         state.status = \"failed\";\n       })\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n"
                },
                {
                    "date": 1642936391827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,19 +47,19 @@\n       })\n       .addCase(getDeliveries.fulfilled, (state, action) => {\n         state.status = \"success\";\n         // TODO: use setAll when listing API has status as well\n-        deliveriesAdapter.upsertMany(state.data as any, action as any);\n+        deliveriesAdapter.upsertMany(state.data as any, action);\n       })\n-      .addCase(getDeliveries.rejected, (state) => {\n+      .addCase(getDeliveries.rejected, (state, action) => {\n         state.status = \"failed\";\n       })\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n         state.deliveryStatus = \"idle\";\n-        deliveriesAdapter.setOne(state.data as any, action as any);\n+        deliveriesAdapter.setOne(state.data as any, action);\n       })\n       .addCase(getDeliveryDetails.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       })\n@@ -74,9 +74,9 @@\n         // hack ends\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n-        deliveriesAdapter.upsertOne(state.data as any, action as any);\n+        deliveriesAdapter.upsertOne(state.data as any, action);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n"
                },
                {
                    "date": 1642940466903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,20 +3,20 @@\n   PayloadAction,\n   createEntityAdapter,\n } from \"@reduxjs/toolkit\";\n import {\n-  getDeliveries,\n+  getDeliveryList,\n   getDeliveryDetails,\n   setDeliveryStatus,\n } from \"./middleware\";\n-import { TDeliveriesState } from \"./types\";\n+import { TDeliveryListState } from \"./types\";\n \n \n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n-const deliveriesAdapter = createEntityAdapter<TDeliveriesState[\"data\"]>();\n+const deliveriesAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n \n \n-export const initialState: TDeliveriesState = {\n+export const initialState: TDeliveryListState = {\n   data: deliveriesAdapter.getInitialState({}),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n@@ -41,17 +41,17 @@\n   // The `extraReducers` field lets the slice handle actions defined elsewhere,\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n-      .addCase(getDeliveries.pending, (state) => {\n+      .addCase(getDeliveryList.pending, (state) => {\n         state.status = \"loading\";\n       })\n-      .addCase(getDeliveries.fulfilled, (state, action) => {\n+      .addCase(getDeliveryList.fulfilled, (state, action) => {\n         state.status = \"success\";\n         // TODO: use setAll when listing API has status as well\n         deliveriesAdapter.upsertMany(state.data as any, action);\n       })\n-      .addCase(getDeliveries.rejected, (state, action) => {\n+      .addCase(getDeliveryList.rejected, (state, action) => {\n         state.status = \"failed\";\n       })\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n"
                },
                {
                    "date": 1642940493280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,20 +11,20 @@\n import { TDeliveryListState } from \"./types\";\n \n \n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n-const deliveriesAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n+const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n \n \n export const initialState: TDeliveryListState = {\n-  data: deliveriesAdapter.getInitialState({}),\n+  data: deliveryListAdapter.getInitialState({}),\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n };\n \n-export const deliveriesSlice = createSlice({\n-  name: \"deliveries\",\n+export const deliveryListSlice = createSlice({\n+  name: \"deliveryList\",\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n     setActiveDelivery: (state, action: PayloadAction<string>) => {\n@@ -47,9 +47,9 @@\n       })\n       .addCase(getDeliveryList.fulfilled, (state, action) => {\n         state.status = \"success\";\n         // TODO: use setAll when listing API has status as well\n-        deliveriesAdapter.upsertMany(state.data as any, action);\n+        deliveryListAdapter.upsertMany(state.data as any, action);\n       })\n       .addCase(getDeliveryList.rejected, (state, action) => {\n         state.status = \"failed\";\n       })\n@@ -57,9 +57,9 @@\n         state.deliveryStatus = \"loading\";\n       })\n       .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n         state.deliveryStatus = \"idle\";\n-        deliveriesAdapter.setOne(state.data as any, action);\n+        deliveryListAdapter.setOne(state.data as any, action);\n       })\n       .addCase(getDeliveryDetails.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       })\n@@ -74,17 +74,17 @@\n         // hack ends\n         state.deliveryStatus = \"idle\";\n         state.activeDeliveryId = null;\n         \n-        deliveriesAdapter.upsertOne(state.data as any, action);\n+        deliveryListAdapter.upsertOne(state.data as any, action);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.deliveryStatus = \"failed\";\n       });\n   },\n });\n \n-export default deliveriesSlice.reducer;\n+export default deliveryListSlice.reducer;\n \n // actions\n export const { setActiveDelivery, resetActiveDelivery } =\n-  deliveriesSlice.actions;\n+  deliveryListSlice.actions;\n"
                }
            ],
            "date": 1642935111447,
            "name": "Commit-0",
            "content": "import {\n  createSlice,\n  PayloadAction,\n  createEntityAdapter,\n} from \"@reduxjs/toolkit\";\nimport { TDeliveryItemDetails } from \"../../../api/types\";\nimport {\n  getDeliveries,\n  getDeliveryDetails,\n  setDeliveryStatus,\n} from \"./middleware\";\nimport { TApiStatus } from \"./types\";\n\n\nexport interface DeliveriesState {\n  data: {\n    ids: string[];\n    entities: Record<string, TDeliveryItemDetails>;\n  };\n  status: TApiStatus;\n  deliveryStatus: TApiStatus;\n  activeDeliveryId: null | string;\n}\n\nexport const deliveriesAdapter = createEntityAdapter<DeliveriesState[\"data\"]>();\nexport const initialState: DeliveriesState = {\n  data: deliveriesAdapter.getInitialState({} as DeliveriesState[\"data\"]),\n  status: \"idle\",\n  deliveryStatus: \"idle\",\n  activeDeliveryId: null,\n};\n\nexport const deliveriesSlice = createSlice({\n  name: \"deliveries\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setActiveDelivery: (state, action: PayloadAction<string>) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activeDeliveryId = action.payload;\n    },\n    resetActiveDelivery: (state) => {\n      state.activeDeliveryId = null;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(getDeliveries.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getDeliveries.fulfilled, (state, action) => {\n        state.status = \"success\";\n        // TODO: use setAll when listing API has status as well\n        deliveriesAdapter.upsertMany(state.data as any, action as any);\n      })\n      .addCase(getDeliveries.rejected, (state, action) => {\n        state.status = \"failed\";\n      })\n      .addCase(getDeliveryDetails.pending, (state) => {\n        state.deliveryStatus = \"loading\";\n      })\n      .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n        state.deliveryStatus = \"idle\";\n        deliveriesAdapter.setOne(state.data as any, action as any);\n      })\n      .addCase(getDeliveryDetails.rejected, (state, action) => {\n        state.deliveryStatus = \"failed\";\n      })\n      .addCase(setDeliveryStatus.pending, (state) => {\n        state.deliveryStatus = \"loading\";\n      })\n      .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n        // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n        const status = action.meta.arg.status \n        const id = action.meta.arg.deliveryId \n        action.payload = {id,  status}\n        // hack ends\n        state.deliveryStatus = \"idle\";\n        state.activeDeliveryId = null;\n        \n        deliveriesAdapter.upsertOne(state.data as any, action as any);\n      })\n      .addCase(setDeliveryStatus.rejected, (state, action) => {\n        state.deliveryStatus = \"failed\";\n      });\n  },\n});\n\nexport default deliveriesSlice.reducer;\n\n// actions\nexport const { setActiveDelivery, resetActiveDelivery } =\n  deliveriesSlice.actions;\n"
        }
    ]
}