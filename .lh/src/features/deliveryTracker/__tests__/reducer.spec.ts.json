{
    "sourceFile": "src/features/deliveryTracker/__tests__/reducer.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 66,
            "patches": [
                {
                    "date": 1642949320322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642949510762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,15 @@\n import { createEntityAdapter } from '@reduxjs/toolkit';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, {\n-  initialState as reducerInitialState\n-  increment,\n-  decrement,\n-  incrementByAmount,\n } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n \n-// This is the section where we mock `fetch`\n-const unmockedFetch = global.fetch\n-\n-beforeAll(() => {\n-  global.fetch = ():any =>\n-    Promise.resolve({\n-      json: () => Promise.resolve([]),\n-    })\n-})\n-\n-afterAll(() => {\n-  global.fetch = unmockedFetch\n-})\n-\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n \n-export const initialState: TDeliveryListState = {\n+const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n     [FETCH_DELIVERY]: \"idle\",\n@@ -39,8 +21,9 @@\n }\n \n   it('should handle initial state', () => {\n     expect(deliveryTrackerReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n+  });\n \n   it('should handle increment', () => {\n     const actual = deliveryTrackerReducer(initialState, increment());\n     expect(actual.value).toEqual(4);\n"
                },
                {
                    "date": 1642949520169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,19 +23,19 @@\n   it('should handle initial state', () => {\n     expect(deliveryTrackerReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n   });\n \n-  it('should handle increment', () => {\n-    const actual = deliveryTrackerReducer(initialState, increment());\n-    expect(actual.value).toEqual(4);\n-  });\n+  // it('should handle increment', () => {\n+  //   const actual = deliveryTrackerReducer(initialState, increment());\n+  //   expect(actual.value).toEqual(4);\n+  // });\n \n-  it('should handle decrement', () => {\n-    const actual = deliveryTrackerReducer(initialState, decrement());\n-    expect(actual.value).toEqual(2);\n-  });\n+  // it('should handle decrement', () => {\n+  //   const actual = deliveryTrackerReducer(initialState, decrement());\n+  //   expect(actual.value).toEqual(2);\n+  // });\n \n-  it('should handle incrementByAmount', () => {\n-    const actual = deliveryTrackerReducer(initialState, incrementByAmount(2));\n-    expect(actual.value).toEqual(5);\n-  });\n+  // it('should handle incrementByAmount', () => {\n+  //   const actual = deliveryTrackerReducer(initialState, incrementByAmount(2));\n+  //   expect(actual.value).toEqual(5);\n+  // });\n });\n"
                },
                {
                    "date": 1642949656170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { createEntityAdapter } from '@reduxjs/toolkit';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n-import deliveryTrackerReducer, {\n-} from '../state/slice';\n+import deliveryTrackerReducer, { setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n@@ -23,12 +22,12 @@\n   it('should handle initial state', () => {\n     expect(deliveryTrackerReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n   });\n \n-  // it('should handle increment', () => {\n-  //   const actual = deliveryTrackerReducer(initialState, increment());\n-  //   expect(actual.value).toEqual(4);\n-  // });\n+  it('should handle increment', () => {\n+    const actual = deliveryTrackerReducer(initialState, setActiveDelivery(\"2\"));\n+    expect(actual.activeDeliveryId).toEqual(\"2\");\n+  });\n \n   // it('should handle decrement', () => {\n   //   const actual = deliveryTrackerReducer(initialState, decrement());\n   //   expect(actual.value).toEqual(2);\n"
                },
                {
                    "date": 1642949690572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { createEntityAdapter } from '@reduxjs/toolkit';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n-import deliveryTrackerReducer, { setActiveDelivery } from '../state/slice';\n+import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n@@ -27,12 +27,12 @@\n     const actual = deliveryTrackerReducer(initialState, setActiveDelivery(\"2\"));\n     expect(actual.activeDeliveryId).toEqual(\"2\");\n   });\n \n-  // it('should handle decrement', () => {\n-  //   const actual = deliveryTrackerReducer(initialState, decrement());\n-  //   expect(actual.value).toEqual(2);\n-  // });\n+  it('should handle decrement', () => {\n+    const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n+    expect(actual.activeDeliveryId).toEqual(null);\n+  });\n \n   // it('should handle incrementByAmount', () => {\n   //   const actual = deliveryTrackerReducer(initialState, incrementByAmount(2));\n   //   expect(actual.value).toEqual(5);\n"
                },
                {
                    "date": 1642949731365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,14 @@\n   it('should handle initial state', () => {\n     expect(deliveryTrackerReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n   });\n \n-  it('should handle increment', () => {\n+  it('should handle setting active delivery id', () => {\n     const actual = deliveryTrackerReducer(initialState, setActiveDelivery(\"2\"));\n     expect(actual.activeDeliveryId).toEqual(\"2\");\n   });\n \n-  it('should handle decrement', () => {\n+  it('should handle resetting active delivery id', () => {\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n"
                },
                {
                    "date": 1642949893762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { createEntityAdapter } from '@reduxjs/toolkit';\n+import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n \n@@ -32,9 +33,10 @@\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n-  // it('should handle incrementByAmount', () => {\n-  //   const actual = deliveryTrackerReducer(initialState, incrementByAmount(2));\n-  //   expect(actual.value).toEqual(5);\n-  // });\n+  it('should call list API and set data to state', () => {\n+    const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n+    console.log(actual,\"accc\")\n+    // expect(actual).toEqual(5);\n+  });\n });\n"
                },
                {
                    "date": 1642949968362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,13 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-\n+const fetchMock = jest\n+  .spyOn(global, 'fetch')\n+  .mockImplementation(():any =>\n+    Promise.resolve({ json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]) })\n+  )\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642950081189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,14 @@\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n \n+global.fetch = jest.fn(() =>\n+Promise.resolve({\n+  json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+})\n+);\n+\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n const fetchMock = jest\n@@ -38,8 +44,9 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it('should call list API and set data to state', () => {\n+   \n     const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n"
                },
                {
                    "date": 1642951069137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,8 @@\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n \n-global.fetch = jest.fn(() =>\n-Promise.resolve({\n-  json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-})\n-);\n-\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n const fetchMock = jest\n@@ -44,9 +38,13 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it('should call list API and set data to state', () => {\n-   \n+    global.fetch = jest.fn(() =>\n+      Promise.resolve({\n+        json: () => Promise.resolve({ rates: { CAD: 1.42 } }),\n+      })\n+    );\n     const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n"
                },
                {
                    "date": 1642951125899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n   it('should call list API and set data to state', () => {\n     global.fetch = jest.fn(() =>\n       Promise.resolve({\n-        json: () => Promise.resolve({ rates: { CAD: 1.42 } }),\n+        json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n       })\n     );\n     const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n     console.log(actual,\"accc\")\n"
                },
                {
                    "date": 1642951150827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n-  it('should call list API and set data to state', () => {\n+  it.only('should call list API and set data to state', () => {\n     global.fetch = jest.fn(() =>\n       Promise.resolve({\n         json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n       })\n"
                },
                {
                    "date": 1642951186242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,15 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-const fetchMock = jest\n-  .spyOn(global, 'fetch')\n-  .mockImplementation(():any =>\n-    Promise.resolve({ json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]) })\n-  )\n+beforeAll(()=>{\n+  global.fetch = jest.fn(() =>\n+  Promise.resolve({\n+    json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+  })\n+);\n+})\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n@@ -38,13 +40,9 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', () => {\n-    global.fetch = jest.fn(() =>\n-      Promise.resolve({\n-        json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-      })\n-    );\n+\n     const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n"
                },
                {
                    "date": 1642951217160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n beforeAll(()=>{\n+  console.log(global,\"\")\n   global.fetch = jest.fn(() =>\n   Promise.resolve({\n     json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n   })\n"
                },
                {
                    "date": 1642951229812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n beforeAll(()=>{\n-  console.log(global,\"\")\n+  console.log(global.fetch,\"ffef\")\n   global.fetch = jest.fn(() =>\n   Promise.resolve({\n     json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n   })\n"
                },
                {
                    "date": 1642951278259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n beforeAll(()=>{\n-  console.log(global.fetch,\"ffef\")\n   global.fetch = jest.fn(() =>\n   Promise.resolve({\n+    status: 200,\n     json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n   })\n );\n })\n"
                },
                {
                    "date": 1642951342003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,16 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n+global.fetch = jest.fn(() =>\n+Promise.resolve({\n+  status: 200,\n+  json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+})\n+);\n beforeAll(()=>{\n-  global.fetch = jest.fn(() =>\n-  Promise.resolve({\n-    status: 200,\n-    json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-  })\n-);\n+ \n })\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n"
                },
                {
                    "date": 1642951352431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n   status: 200,\n   json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n })\n );\n-beforeAll(()=>{\n- \n+beforeEach(()=>{\n+  fetch.mockClear();\n })\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n"
                },
                {
                    "date": 1642951429019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-global.fetch = jest.fn(() =>\n+fetch = jest.fn(() =>\n Promise.resolve({\n   status: 200,\n   json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n })\n"
                },
                {
                    "date": 1642951435395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,8 @@\n   status: 200,\n   json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n })\n );\n-beforeEach(()=>{\n-  fetch.mockClear();\n-})\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642951493829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,17 @@\n   status: 200,\n   json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n })\n );\n+global.fetch = jest.fn().mockImplementationOnce(() => {\n+  return new Promise((resolve, reject) => {\n+    resolve({\n+      ok: true,\n+      status: 200,\n+      json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),,\n+    });\n+  });\n+});\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642951522603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,21 +6,15 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-fetch = jest.fn(() =>\n-Promise.resolve({\n-  status: 200,\n-  json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-})\n-);\n global.fetch = jest.fn().mockImplementationOnce(() => {\n   return new Promise((resolve, reject) => {\n     resolve({\n       ok: true,\n       status: 200,\n-      json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),,\n-    });\n+      json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+    })\n   });\n });\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n"
                },
                {
                    "date": 1642951655410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,21 +2,22 @@\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n+import 'isomorphic-fetch';\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-global.fetch = jest.fn().mockImplementationOnce(() => {\n-  return new Promise((resolve, reject) => {\n-    resolve({\n-      ok: true,\n-      status: 200,\n-      json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-    })\n-  });\n-});\n+// global.fetch = jest.fn().mockImplementationOnce(() => {\n+//   return new Promise((resolve, reject) => {\n+//     resolve({\n+//       ok: true,\n+//       status: 200,\n+//       json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+//     })\n+//   });\n+// });\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642951743023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,17 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-// global.fetch = jest.fn().mockImplementationOnce(() => {\n-//   return new Promise((resolve, reject) => {\n-//     resolve({\n-//       ok: true,\n-//       status: 200,\n-//       json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-//     })\n-//   });\n-// });\n+global.fetch = jest.fn().mockImplementationOnce(() => {\n+  return new Promise((resolve, reject) => {\n+    resolve({\n+      ok: true,\n+      status: 200,\n+      json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+    })\n+  });\n+});\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642951821662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   });\n \n   it.only('should call list API and set data to state', () => {\n \n-    const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n+    const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any;\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642951829958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   });\n \n   it.only('should call list API and set data to state', () => {\n \n-    const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any;\n+    const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642951956469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,22 +2,21 @@\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n-import 'isomorphic-fetch';\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-global.fetch = jest.fn().mockImplementationOnce(() => {\n-  return new Promise((resolve, reject) => {\n-    resolve({\n-      ok: true,\n-      status: 200,\n-      json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-    })\n-  });\n-});\n+// global.fetch = jest.fn().mockImplementationOnce(() => {\n+//   return new Promise((resolve, reject) => {\n+//     resolve({\n+//       ok: true,\n+//       status: 200,\n+//       json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+//     })\n+//   });\n+// });\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642952784482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,13 @@\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n+import fetch from 'jest-fetch-mock'\n \n+\n+fetch.mockResponse(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]))\n+\n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n // global.fetch = jest.fn().mockImplementationOnce(() => {\n"
                },
                {
                    "date": 1642952931619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,29 @@\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n-import fetch from 'jest-fetch-mock'\n \n \n-fetch.mockResponse(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]))\n+beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n+  fetchMock.mockIf(/.*/, (req: any):any => {\n+      if (req.url.endsWith(\"/\")) {\n+        return \"some response body\"\n+      } else if (req.url.endsWith(\"/path2\")) {\n+        return {\n+          body: \"another response body\",\n+          headers: {\n+            \"X-Some-Response-Header\": \"Some header value\"\n+          } \n+        }\n+      } else {\n+        return {\n+          status: 404,\n+          body: \"Not Found\"\n+        }\n+      }\n+  })\n+})\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n@@ -19,8 +36,9 @@\n //       json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n //     })\n //   });\n // });\n+\n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n"
                },
                {
                    "date": 1642956036060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n   fetchMock.mockIf(/.*/, (req: any):any => {\n-      if (req.url.endsWith(\"/\")) {\n+      if (true) {\n         return \"some response body\"\n       } else if (req.url.endsWith(\"/path2\")) {\n         return {\n           body: \"another response body\",\n"
                },
                {
                    "date": 1642956063600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n   fetchMock.mockIf(/.*/, (req: any):any => {\n       if (true) {\n-        return \"some response body\"\n+        return [{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]\n       } else if (req.url.endsWith(\"/path2\")) {\n         return {\n           body: \"another response body\",\n           headers: {\n"
                },
                {
                    "date": 1642956315991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,25 +5,9 @@\n import { TDeliveryListState } from '../state/types';\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockIf(/.*/, (req: any):any => {\n-      if (true) {\n-        return [{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]\n-      } else if (req.url.endsWith(\"/path2\")) {\n-        return {\n-          body: \"another response body\",\n-          headers: {\n-            \"X-Some-Response-Header\": \"Some header value\"\n-          } \n-        }\n-      } else {\n-        return {\n-          status: 404,\n-          body: \"Not Found\"\n-        }\n-      }\n-  })\n+  fetchMock.mockOnce([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}])\n })\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n"
                },
                {
                    "date": 1642956594926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,11 @@\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n-  it.only('should call list API and set data to state', () => {\n+  it.only('should call list API and set data to state', async () => {\n \n-    const actual = deliveryTrackerReducer(initialState, getDeliveryList() as any);\n+    const actual = deliveryTrackerReducer(initialState, await getDeliveryList() as any);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642956627111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,11 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n+    const action  = await getDeliveryList()\n \n-    const actual = deliveryTrackerReducer(initialState, await getDeliveryList() as any);\n+    const actual = deliveryTrackerReducer(initialState, action);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642956656519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n-    const action  = await getDeliveryList()\n+    const action  = getDeliveryList()\n \n-    const actual = deliveryTrackerReducer(initialState, action);\n+    const actual = await deliveryTrackerReducer(initialState, action);\n     console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642956693804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { createEntityAdapter } from '@reduxjs/toolkit';\n+import { waitFor } from '@testing-library/react';\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n@@ -49,10 +50,13 @@\n   });\n \n   it.only('should call list API and set data to state', async () => {\n     const action  = getDeliveryList()\n+    waitFor(()=>{\n+      const actual =  deliveryTrackerReducer(initialState, action);\n+      console.log(actual,\"accc\")\n \n-    const actual = await deliveryTrackerReducer(initialState, action);\n-    console.log(actual,\"accc\")\n+    },{timeout: 2000})\n+\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642956742557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,10 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n-    const action  = getDeliveryList()\n     waitFor(()=>{\n-      const actual =  deliveryTrackerReducer(initialState, action);\n+      const actual =  deliveryTrackerReducer(initialState, getDeliveryList());\n       console.log(actual,\"accc\")\n \n     },{timeout: 2000})\n \n"
                },
                {
                    "date": 1642956756250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,11 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n+    const action  = getDeliveryList()\n     waitFor(()=>{\n-      const actual =  deliveryTrackerReducer(initialState, getDeliveryList());\n+      const actual =  deliveryTrackerReducer(initialState, action);\n       console.log(actual,\"accc\")\n \n     },{timeout: 2000})\n \n"
                },
                {
                    "date": 1642956856491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,14 +49,9 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n-    const action  = getDeliveryList()\n-    waitFor(()=>{\n-      const actual =  deliveryTrackerReducer(initialState, action);\n+      const actual =  deliveryTrackerReducer(initialState, getDeliveryList());\n       console.log(actual,\"accc\")\n-\n-    },{timeout: 2000})\n-\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642956900567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,8 @@\n     [FETCH_DELIVERY_LIST]: \"idle\",\n     [FETCH_DELIVERY]: \"idle\",\n     [POST_DELIVERY_STATUS]: \"idle\",\n   },\n-  status: \"idle\",\n-  deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n }\n \n   it('should handle initial state', () => {\n"
                },
                {
                    "date": 1642956937401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { TDeliveryListState } from '../state/types';\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockOnce([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}])\n+  fetchMock.mockOnce({bpdy: [{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]})\n })\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n"
                },
                {
                    "date": 1642957125657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,13 @@\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n+import {store} from '../../../store'\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockOnce({bpdy: [{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]})\n+  fetchMock.mockOnce({body: [{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]})\n })\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n@@ -47,9 +48,12 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n-      const actual =  deliveryTrackerReducer(initialState, getDeliveryList());\n+    store.dispatch(getDeliveryList())\n+  \n+      const actual =  store.getState();\n+\n       console.log(actual,\"accc\")\n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642957157003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,13 @@\n   });\n \n   it.only('should call list API and set data to state', async () => {\n     store.dispatch(getDeliveryList())\n-  \n+     waitFor(()=>{\n       const actual =  store.getState();\n \n       console.log(actual,\"accc\")\n+     },{timeout: 3000})\n+     \n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642957467135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     store.dispatch(getDeliveryList())\n      waitFor(()=>{\n       const actual =  store.getState();\n \n-      console.log(actual,\"accc\")\n+      console.log(actual,\"abc\")\n      },{timeout: 3000})\n      \n     // expect(actual).toEqual(5);\n   });\n"
                },
                {
                    "date": 1642957485529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n      waitFor(()=>{\n       const actual =  store.getState();\n \n       console.log(actual,\"abc\")\n-     },{timeout: 3000})\n+     },{timeout: 5000})\n      \n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642957504692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n      waitFor(()=>{\n       const actual =  store.getState();\n \n       console.log(actual,\"abc\")\n-     },{timeout: 5000})\n+     },{timeout: 4000})\n      \n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642957652199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,15 @@\n import {store} from '../../../store'\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockOnce({body: [{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]})\n+  fetchMock.once('http://test.url', {\n+  status: 200,\n+  body: JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n+  statusText: 'OK',\n+  headers: {'Content-Type': 'application/json'},\n+  sendAsJson: false\n+}, {method: 'GET'});\n })\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n"
                },
                {
                    "date": 1642957705961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,9 @@\n import {store} from '../../../store'\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.once('http://test.url', {\n-  status: 200,\n-  body: JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-  statusText: 'OK',\n-  headers: {'Content-Type': 'application/json'},\n-  sendAsJson: false\n-}, {method: 'GET'});\n-})\n+  fetchMock.mockOnce(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]))\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n"
                },
                {
                    "date": 1642957733103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n import {store} from '../../../store'\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockOnce(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]))\n+  fetchMock.mockOnce(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]));\n+})\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n"
                },
                {
                    "date": 1642957877533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import {store} from '../../../store'\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockOnce(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]));\n+  fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]));\n })\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n@@ -53,9 +53,9 @@\n      waitFor(()=>{\n       const actual =  store.getState();\n \n       console.log(actual,\"abc\")\n-     },{timeout: 4000})\n+     },{timeout: 5000})\n      \n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642957931175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,14 +48,12 @@\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n   it.only('should call list API and set data to state', async () => {\n-    store.dispatch(getDeliveryList())\n-     waitFor(()=>{\n-      const actual =  store.getState();\n+    await store.dispatch(getDeliveryList())\n+    const actual =  store.getState();\n \n       console.log(actual,\"abc\")\n-     },{timeout: 5000})\n      \n     // expect(actual).toEqual(5);\n   });\n });\n"
                },
                {
                    "date": 1642957987385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,7 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n-\n-      console.log(actual,\"abc\")\n-     \n-    // expect(actual).toEqual(5);\n+     expect(actual.deliveryTracker.data.entities.id).toEqual(\"4\");\n   });\n });\n"
                },
                {
                    "date": 1642958028474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import {store} from '../../../store'\n \n \n beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]));\n+  fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"Barcelona\"}]));\n })\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n@@ -50,7 +50,7 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n-     expect(actual.deliveryTracker.data.entities.id).toEqual(\"4\");\n+     expect(actual.deliveryTracker.data.entities.address).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958048500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,7 +50,8 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n+    console.log(actual.deliveryTracker.data.entities.address,\"yuyu\")\n      expect(actual.deliveryTracker.data.entities.address).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958062187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,8 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n-    console.log(actual.deliveryTracker.data.entities.address,\"yuyu\")\n+    console.log(actual.deliveryTracker.data,\"yuyu\")\n      expect(actual.deliveryTracker.data.entities.address).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958132318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,8 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n-    console.log(actual.deliveryTracker.data,\"yuyu\")\n-     expect(actual.deliveryTracker.data.entities.address).toEqual(\"Barcelona\");\n+    console.log(actual.deliveryTracker.data.entities[\"4\"],\"yuyu\")\n+     expect(actual.deliveryTracker.data.entities[[\"4\"]?.address).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958159240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,8 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n-    console.log(actual.deliveryTracker.data.entities[\"4\"],\"yuyu\")\n-     expect(actual.deliveryTracker.data.entities[[\"4\"]?.address).toEqual(\"Barcelona\");\n+    console.log(actual.deliveryTracker.data.entities[\"4\"].address,\"yuyu\")\n+     expect(actual.deliveryTracker.data.entities[\"4\"].address).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958227173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,8 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n-    console.log(actual.deliveryTracker.data.entities[\"4\"].address,\"yuyu\")\n+     expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n      expect(actual.deliveryTracker.data.entities[\"4\"].address).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958346295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,7 @@\n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n-     expect(actual.deliveryTracker.data.entities[\"4\"].address).toEqual(\"Barcelona\");\n+     expect(actual.deliveryTracker.data.entities?['4']['address'] as string).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958358491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,7 @@\n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n-     expect(actual.deliveryTracker.data.entities?['4']['address'] as string).toEqual(\"Barcelona\");\n+     expect(actual.deliveryTracker.data.entities?['4']['address']).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958375171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,7 @@\n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n-     expect(actual.deliveryTracker.data.entities?['4']['address']).toEqual(\"Barcelona\");\n+     expect(actual.deliveryTracker.data.entities['4']['address']).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958403375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,7 @@\n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n-     expect(actual.deliveryTracker.data.entities['4']['address']).toEqual(\"Barcelona\");\n+     expect((actual.deliveryTracker.data as any).entities['4']['address']).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958451682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n \n   it.only('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n+     expect(actual.deliveryTracker.apiStatus['deliveryList/fetchAllDeliveryList']).toEqual(\"success\");\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n      expect((actual.deliveryTracker.data as any).entities['4']['address']).toEqual(\"Barcelona\");\n   });\n });\n"
                },
                {
                    "date": 1642958483307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,17 +13,8 @@\n \n describe('delivery tracker reducer', () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n-// global.fetch = jest.fn().mockImplementationOnce(() => {\n-//   return new Promise((resolve, reject) => {\n-//     resolve({\n-//       ok: true,\n-//       status: 200,\n-//       json: () => Promise.resolve([{id: \"4\", address: \"jdshfjk ksdhfkjsh\"}]),\n-//     })\n-//   });\n-// });\n \n const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n"
                },
                {
                    "date": 1642960155255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n-  it.only('should call list API and set data to state', async () => {\n+  it('should call list API and set data to state', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n      expect(actual.deliveryTracker.apiStatus['deliveryList/fetchAllDeliveryList']).toEqual(\"success\");\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n"
                },
                {
                    "date": 1642960263565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { createEntityAdapter } from '@reduxjs/toolkit';\n-import { waitFor } from '@testing-library/react';\n import { getDeliveryList } from '../state/asyncActions';\n import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n import { TDeliveryListState } from '../state/types';\n@@ -38,9 +37,9 @@\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n-  it('should call list API and set data to state', async () => {\n+  it('should call list API, set data to state and set api status to success', async () => {\n     await store.dispatch(getDeliveryList())\n     const actual =  store.getState();\n      expect(actual.deliveryTracker.apiStatus['deliveryList/fetchAllDeliveryList']).toEqual(\"success\");\n      expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n"
                },
                {
                    "date": 1642963373991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,63 @@\n-import { createEntityAdapter } from '@reduxjs/toolkit';\n-import { getDeliveryList } from '../state/asyncActions';\n-import { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\n-import deliveryTrackerReducer, { resetActiveDelivery, setActiveDelivery } from '../state/slice';\n-import { TDeliveryListState } from '../state/types';\n-import {store} from '../../../store'\n+import { createEntityAdapter } from \"@reduxjs/toolkit\";\n+import { getDeliveryList } from \"../state/asyncActions\";\n+import {\n+  FETCH_DELIVERY,\n+  FETCH_DELIVERY_LIST,\n+  POST_DELIVERY_STATUS,\n+} from \"../state/constants\";\n+import deliveryTrackerReducer, {\n+  resetActiveDelivery,\n+  setActiveDelivery,\n+} from \"../state/slice\";\n+import { TDeliveryListState } from \"../state/types\";\n+import { store } from \"../../../store\";\n \n+beforeEach(() => {\n+  // if you have an existing `beforeEach` just add the following lines to it\n+  fetchMock.mockResponseOnce(\n+    JSON.stringify([{ id: \"4\", address: \"Barcelona\" }])\n+  );\n+});\n \n-beforeEach(() => { // if you have an existing `beforeEach` just add the following lines to it\n-  fetchMock.mockResponseOnce(JSON.stringify([{id: \"4\", address: \"Barcelona\"}]));\n-})\n-\n-describe('delivery tracker reducer', () => {\n+describe(\"delivery tracker reducer\", () => {\n   // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n-const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n+  const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n \n-const initialState: TDeliveryListState = {\n-  data: deliveryListAdapter.getInitialState({}),\n-  apiStatus: {\n-    [FETCH_DELIVERY_LIST]: \"idle\",\n-    [FETCH_DELIVERY]: \"idle\",\n-    [POST_DELIVERY_STATUS]: \"idle\",\n-  },\n-  activeDeliveryId: null,\n-}\n+  const initialState: TDeliveryListState = {\n+    data: deliveryListAdapter.getInitialState({}),\n+    apiStatus: {\n+      [FETCH_DELIVERY_LIST]: \"idle\",\n+      [FETCH_DELIVERY]: \"idle\",\n+      [POST_DELIVERY_STATUS]: \"idle\",\n+    },\n+    activeDeliveryId: null,\n+  };\n \n-  it('should handle initial state', () => {\n-    expect(deliveryTrackerReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n+  it(\"should handle initial state\", () => {\n+    expect(deliveryTrackerReducer(undefined, { type: \"unknown\" })).toEqual(\n+      initialState\n+    );\n   });\n \n-  it('should handle setting active delivery id', () => {\n+  it(\"should handle setting active delivery id\", () => {\n     const actual = deliveryTrackerReducer(initialState, setActiveDelivery(\"2\"));\n     expect(actual.activeDeliveryId).toEqual(\"2\");\n   });\n \n-  it('should handle resetting active delivery id', () => {\n+  it(\"should handle resetting active delivery id\", () => {\n     const actual = deliveryTrackerReducer(initialState, resetActiveDelivery());\n     expect(actual.activeDeliveryId).toEqual(null);\n   });\n \n-  it('should call list API, set data to state and set api status to success', async () => {\n-    await store.dispatch(getDeliveryList())\n-    const actual =  store.getState();\n-     expect(actual.deliveryTracker.apiStatus['deliveryList/fetchAllDeliveryList']).toEqual(\"success\");\n-     expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n-     expect((actual.deliveryTracker.data as any).entities['4']['address']).toEqual(\"Barcelona\");\n+  it(\"should call list API, set data to state and set api status to success\", async () => {\n+    await store.dispatch(getDeliveryList());\n+    const actual = store.getState();\n+    expect(\n+      actual.deliveryTracker.apiStatus[\"deliveryList/fetchAllDeliveryList\"]\n+    ).toEqual(\"success\");\n+    expect(actual.deliveryTracker.data.ids[0]).toEqual(\"4\");\n+    expect(\n+      (actual.deliveryTracker.data as any).entities[\"4\"][\"address\"]\n+    ).toEqual(\"Barcelona\");\n   });\n });\n"
                }
            ],
            "date": 1642949320322,
            "name": "Commit-0",
            "content": "import { createEntityAdapter } from '@reduxjs/toolkit';\nimport { FETCH_DELIVERY, FETCH_DELIVERY_LIST, POST_DELIVERY_STATUS } from '../state/constants';\nimport deliveryTrackerReducer, {\n  initialState as reducerInitialState\n  increment,\n  decrement,\n  incrementByAmount,\n} from '../state/slice';\nimport { TDeliveryListState } from '../state/types';\n\n// This is the section where we mock `fetch`\nconst unmockedFetch = global.fetch\n\nbeforeAll(() => {\n  global.fetch = ():any =>\n    Promise.resolve({\n      json: () => Promise.resolve([]),\n    })\n})\n\nafterAll(() => {\n  global.fetch = unmockedFetch\n})\n\ndescribe('delivery tracker reducer', () => {\n  // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\nconst deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n\nexport const initialState: TDeliveryListState = {\n  data: deliveryListAdapter.getInitialState({}),\n  apiStatus: {\n    [FETCH_DELIVERY_LIST]: \"idle\",\n    [FETCH_DELIVERY]: \"idle\",\n    [POST_DELIVERY_STATUS]: \"idle\",\n  },\n  status: \"idle\",\n  deliveryStatus: \"idle\",\n  activeDeliveryId: null,\n}\n\n  it('should handle initial state', () => {\n    expect(deliveryTrackerReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n\n  it('should handle increment', () => {\n    const actual = deliveryTrackerReducer(initialState, increment());\n    expect(actual.value).toEqual(4);\n  });\n\n  it('should handle decrement', () => {\n    const actual = deliveryTrackerReducer(initialState, decrement());\n    expect(actual.value).toEqual(2);\n  });\n\n  it('should handle incrementByAmount', () => {\n    const actual = deliveryTrackerReducer(initialState, incrementByAmount(2));\n    expect(actual.value).toEqual(5);\n  });\n});\n"
        }
    ]
}