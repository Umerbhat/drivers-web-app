{
    "sourceFile": "src/features/deliveryTracker/state/slice.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1642941911605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642943731395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import {\n   getDeliveryList,\n   getDeliveryDetails,\n   setDeliveryStatus,\n-} from \"./middleware\";\n+} from \"./actions\";\n import { TDeliveryListState } from \"./types\";\n \n \n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n"
                },
                {
                    "date": 1642944387360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import {\n   getDeliveryList,\n   getDeliveryDetails,\n   setDeliveryStatus,\n-} from \"./actions\";\n+} from \"./preliminaryActions\";\n import { TDeliveryListState } from \"./types\";\n \n \n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n"
                },
                {
                    "date": 1642944618862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import {\n   getDeliveryList,\n   getDeliveryDetails,\n   setDeliveryStatus,\n-} from \"./preliminaryActions\";\n+} from \"./asyncActions\";\n import { TDeliveryListState } from \"./types\";\n \n \n // Helper adapter to normalize data and gives helper functions to do CRUD in it.\n"
                },
                {
                    "date": 1642944662409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,7 +84,8 @@\n });\n \n export default deliveryListSlice.reducer;\n \n-// actions\n+// Direct actions\n+\n export const { setActiveDelivery, resetActiveDelivery } =\n   deliveryListSlice.actions;\n"
                },
                {
                    "date": 1642944684322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,10 @@\n });\n \n export default deliveryListSlice.reducer;\n \n+\n+\n // Direct actions\n \n export const { setActiveDelivery, resetActiveDelivery } =\n   deliveryListSlice.actions;\n"
                },
                {
                    "date": 1642944774244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,9 @@\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n     setActiveDelivery: (state, action: PayloadAction<string>) => {\n-      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n-      // doesn't actually mutate the state because it uses the Immer library,\n-      // which detects changes to a \"draft state\" and produces a brand new\n-      // immutable state based off those changes\n+      // Write \"mutating\" logic in reducers is ok\n       state.activeDeliveryId = action.payload;\n     },\n     resetActiveDelivery: (state) => {\n       state.activeDeliveryId = null;\n"
                },
                {
                    "date": 1642944788407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,12 @@\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n     setActiveDelivery: (state, action: PayloadAction<string>) => {\n-      // Write \"mutating\" logic in reducers is ok\n+      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n+      // doesn't actually mutate the state because it uses the Immer library,\n+      // which detects changes to a \"draft state\" and produces a brand new\n+      // immutable state based off those changes\n       state.activeDeliveryId = action.payload;\n     },\n     resetActiveDelivery: (state) => {\n       state.activeDeliveryId = null;\n"
                },
                {
                    "date": 1642944799496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n } from \"./asyncActions\";\n import { TDeliveryListState } from \"./types\";\n \n \n-// Helper adapter to normalize data and gives helper functions to do CRUD in it.\n+// NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n \n \n export const initialState: TDeliveryListState = {\n"
                },
                {
                    "date": 1642944921789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,12 @@\n \n \n export const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n+  statuses: {\n+    [FETCH_DELIVERY_LIST]: \"idle\",\n+\n+  }\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n };\n"
                },
                {
                    "date": 1642945102081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   getDeliveryList,\n   getDeliveryDetails,\n   setDeliveryStatus,\n } from \"./asyncActions\";\n+import { FETCH_DELIVERY_LIST, FETCH_DELIVERY, POST_DELIVERY_STATUS } from \"./constants\";\n import { TDeliveryListState } from \"./types\";\n \n \n // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n@@ -16,12 +17,13 @@\n \n \n export const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n-  statuses: {\n+  apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n-\n-  }\n+    [FETCH_DELIVERY]: \"idle\",\n+    [POST_DELIVERY_STATUS]: \"idle\",\n+  },\n   status: \"idle\",\n   deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n };\n"
                },
                {
                    "date": 1642945210673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,11 @@\n   // The `extraReducers` field lets the slice handle actions defined elsewhere,\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n-      .addCase(getDeliveryList.pending, (state) => {\n-        state.status = \"loading\";\n+      .addCase(getDeliveryList.pending, (state, action) => {\n+        console.log(action,\"action\")\n+        state.apiStatus[FETCH_DELIVERY_LIST] = \"loading\";\n       })\n       .addCase(getDeliveryList.fulfilled, (state, action) => {\n         state.status = \"success\";\n         // TODO: use setAll when listing API has status as well\n"
                },
                {
                    "date": 1642945278730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,18 +48,17 @@\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n       .addCase(getDeliveryList.pending, (state, action) => {\n-        console.log(action,\"action\")\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"loading\";\n       })\n       .addCase(getDeliveryList.fulfilled, (state, action) => {\n-        state.status = \"success\";\n+        state.apiStatus[FETCH_DELIVERY_LIST] = \"success\";\n         // TODO: use setAll when listing API has status as well\n         deliveryListAdapter.upsertMany(state.data as any, action);\n       })\n       .addCase(getDeliveryList.rejected, (state, action) => {\n-        state.status = \"failed\";\n+        state.apiStatus[FETCH_DELIVERY_LIST] = \"failed\";\n       })\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.deliveryStatus = \"loading\";\n       })\n"
                },
                {
                    "date": 1642945400797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,33 +59,33 @@\n       .addCase(getDeliveryList.rejected, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"failed\";\n       })\n       .addCase(getDeliveryDetails.pending, (state) => {\n-        state.deliveryStatus = \"loading\";\n+        state.apiStatus[FETCH_DELIVERY] = \"loading\";\n       })\n       .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n-        state.deliveryStatus = \"idle\";\n+        state.apiStatus[FETCH_DELIVERY] = \"idle\";\n         deliveryListAdapter.setOne(state.data as any, action);\n       })\n       .addCase(getDeliveryDetails.rejected, (state, action) => {\n-        state.deliveryStatus = \"failed\";\n+        state.apiStatus[FETCH_DELIVERY] = \"failed\";\n       })\n       .addCase(setDeliveryStatus.pending, (state) => {\n-        state.deliveryStatus = \"loading\";\n+        state.apiStatus[POST_DELIVERY_STATUS] = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n         // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n         const status = action.meta.arg.status \n         const id = action.meta.arg.deliveryId \n         action.payload = {id,  status}\n         // hack ends\n-        state.deliveryStatus = \"idle\";\n+        state.apiStatus[POST_DELIVERY_STATUS] = \"idle\";\n         state.activeDeliveryId = null;\n         \n         deliveryListAdapter.upsertOne(state.data as any, action);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n-        state.deliveryStatus = \"failed\";\n+        state.apiStatus[POST_DELIVERY_STATUS] = \"failed\";\n       });\n   },\n });\n \n"
                },
                {
                    "date": 1642945456443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,18 @@\n   getDeliveryList,\n   getDeliveryDetails,\n   setDeliveryStatus,\n } from \"./asyncActions\";\n-import { FETCH_DELIVERY_LIST, FETCH_DELIVERY, POST_DELIVERY_STATUS } from \"./constants\";\n+import {\n+  FETCH_DELIVERY_LIST,\n+  FETCH_DELIVERY,\n+  POST_DELIVERY_STATUS,\n+} from \"./constants\";\n import { TDeliveryListState } from \"./types\";\n \n-\n // NOTE: Helper adapter to normalize data and gives helper functions to do CRUD in it.\n const deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n \n-\n export const initialState: TDeliveryListState = {\n   data: deliveryListAdapter.getInitialState({}),\n   apiStatus: {\n     [FETCH_DELIVERY_LIST]: \"idle\",\n@@ -62,9 +64,9 @@\n       .addCase(getDeliveryDetails.pending, (state) => {\n         state.apiStatus[FETCH_DELIVERY] = \"loading\";\n       })\n       .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n-        state.apiStatus[FETCH_DELIVERY] = \"idle\";\n+        state.apiStatus[FETCH_DELIVERY] = \"success\";\n         deliveryListAdapter.setOne(state.data as any, action);\n       })\n       .addCase(getDeliveryDetails.rejected, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY] = \"failed\";\n@@ -73,15 +75,15 @@\n         state.apiStatus[POST_DELIVERY_STATUS] = \"loading\";\n       })\n       .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n         // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n-        const status = action.meta.arg.status \n-        const id = action.meta.arg.deliveryId \n-        action.payload = {id,  status}\n+        const status = action.meta.arg.status;\n+        const id = action.meta.arg.deliveryId;\n+        action.payload = { id, status };\n         // hack ends\n-        state.apiStatus[POST_DELIVERY_STATUS] = \"idle\";\n+        state.apiStatus[POST_DELIVERY_STATUS] = \"success\";\n         state.activeDeliveryId = null;\n-        \n+\n         deliveryListAdapter.upsertOne(state.data as any, action);\n       })\n       .addCase(setDeliveryStatus.rejected, (state, action) => {\n         state.apiStatus[POST_DELIVERY_STATUS] = \"failed\";\n@@ -90,10 +92,8 @@\n });\n \n export default deliveryListSlice.reducer;\n \n-\n-\n // Direct actions\n \n export const { setActiveDelivery, resetActiveDelivery } =\n   deliveryListSlice.actions;\n"
                },
                {
                    "date": 1642956491858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n       })\n       .addCase(getDeliveryList.fulfilled, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"success\";\n         // TODO: use setAll when listing API has status as well\n+        console.log(action,\"acacac\")\n         deliveryListAdapter.upsertMany(state.data as any, action);\n       })\n       .addCase(getDeliveryList.rejected, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"failed\";\n"
                },
                {
                    "date": 1642956506902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,14 @@\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n       .addCase(getDeliveryList.pending, (state, action) => {\n+        console.log(action,\"acacac\")\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"loading\";\n       })\n       .addCase(getDeliveryList.fulfilled, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"success\";\n         // TODO: use setAll when listing API has status as well\n-        console.log(action,\"acacac\")\n         deliveryListAdapter.upsertMany(state.data as any, action);\n       })\n       .addCase(getDeliveryList.rejected, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"failed\";\n"
                },
                {
                    "date": 1642956886868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,8 @@\n     [FETCH_DELIVERY_LIST]: \"idle\",\n     [FETCH_DELIVERY]: \"idle\",\n     [POST_DELIVERY_STATUS]: \"idle\",\n   },\n-  status: \"idle\",\n-  deliveryStatus: \"idle\",\n   activeDeliveryId: null,\n };\n \n export const deliveryListSlice = createSlice({\n"
                },
                {
                    "date": 1642960300821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n   // including actions generated by createAsyncThunk or in other slices.\n   extraReducers: (builder) => {\n     builder\n       .addCase(getDeliveryList.pending, (state, action) => {\n-        console.log(action,\"acacac\")\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"loading\";\n       })\n       .addCase(getDeliveryList.fulfilled, (state, action) => {\n         state.apiStatus[FETCH_DELIVERY_LIST] = \"success\";\n"
                }
            ],
            "date": 1642941911605,
            "name": "Commit-0",
            "content": "import {\n  createSlice,\n  PayloadAction,\n  createEntityAdapter,\n} from \"@reduxjs/toolkit\";\nimport {\n  getDeliveryList,\n  getDeliveryDetails,\n  setDeliveryStatus,\n} from \"./middleware\";\nimport { TDeliveryListState } from \"./types\";\n\n\n// Helper adapter to normalize data and gives helper functions to do CRUD in it.\nconst deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n\n\nexport const initialState: TDeliveryListState = {\n  data: deliveryListAdapter.getInitialState({}),\n  status: \"idle\",\n  deliveryStatus: \"idle\",\n  activeDeliveryId: null,\n};\n\nexport const deliveryListSlice = createSlice({\n  name: \"deliveryTracker\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setActiveDelivery: (state, action: PayloadAction<string>) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activeDeliveryId = action.payload;\n    },\n    resetActiveDelivery: (state) => {\n      state.activeDeliveryId = null;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(getDeliveryList.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getDeliveryList.fulfilled, (state, action) => {\n        state.status = \"success\";\n        // TODO: use setAll when listing API has status as well\n        deliveryListAdapter.upsertMany(state.data as any, action);\n      })\n      .addCase(getDeliveryList.rejected, (state, action) => {\n        state.status = \"failed\";\n      })\n      .addCase(getDeliveryDetails.pending, (state) => {\n        state.deliveryStatus = \"loading\";\n      })\n      .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n        state.deliveryStatus = \"idle\";\n        deliveryListAdapter.setOne(state.data as any, action);\n      })\n      .addCase(getDeliveryDetails.rejected, (state, action) => {\n        state.deliveryStatus = \"failed\";\n      })\n      .addCase(setDeliveryStatus.pending, (state) => {\n        state.deliveryStatus = \"loading\";\n      })\n      .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n        // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n        const status = action.meta.arg.status \n        const id = action.meta.arg.deliveryId \n        action.payload = {id,  status}\n        // hack ends\n        state.deliveryStatus = \"idle\";\n        state.activeDeliveryId = null;\n        \n        deliveryListAdapter.upsertOne(state.data as any, action);\n      })\n      .addCase(setDeliveryStatus.rejected, (state, action) => {\n        state.deliveryStatus = \"failed\";\n      });\n  },\n});\n\nexport default deliveryListSlice.reducer;\n\n// actions\nexport const { setActiveDelivery, resetActiveDelivery } =\n  deliveryListSlice.actions;\n"
        }
    ]
}