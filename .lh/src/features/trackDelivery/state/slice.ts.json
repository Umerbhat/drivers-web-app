{
    "sourceFile": "src/features/trackDelivery/state/slice.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1642941135168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1642941769985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   activeDeliveryId: null,\n };\n \n export const deliveryListSlice = createSlice({\n-  name: \"trackDelivery\",\n+  name: \"deliveryTracker\",\n   initialState,\n   // The `reducers` field lets us define reducers and generate associated actions\n   reducers: {\n     setActiveDelivery: (state, action: PayloadAction<string>) => {\n"
                }
            ],
            "date": 1642941135168,
            "name": "Commit-0",
            "content": "import {\n  createSlice,\n  PayloadAction,\n  createEntityAdapter,\n} from \"@reduxjs/toolkit\";\nimport {\n  getDeliveryList,\n  getDeliveryDetails,\n  setDeliveryStatus,\n} from \"./middleware\";\nimport { TDeliveryListState } from \"./types\";\n\n\n// Helper adapter to normalize data and gives helper functions to do CRUD in it.\nconst deliveryListAdapter = createEntityAdapter<TDeliveryListState[\"data\"]>();\n\n\nexport const initialState: TDeliveryListState = {\n  data: deliveryListAdapter.getInitialState({}),\n  status: \"idle\",\n  deliveryStatus: \"idle\",\n  activeDeliveryId: null,\n};\n\nexport const deliveryListSlice = createSlice({\n  name: \"trackDelivery\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setActiveDelivery: (state, action: PayloadAction<string>) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.activeDeliveryId = action.payload;\n    },\n    resetActiveDelivery: (state) => {\n      state.activeDeliveryId = null;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(getDeliveryList.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getDeliveryList.fulfilled, (state, action) => {\n        state.status = \"success\";\n        // TODO: use setAll when listing API has status as well\n        deliveryListAdapter.upsertMany(state.data as any, action);\n      })\n      .addCase(getDeliveryList.rejected, (state, action) => {\n        state.status = \"failed\";\n      })\n      .addCase(getDeliveryDetails.pending, (state) => {\n        state.deliveryStatus = \"loading\";\n      })\n      .addCase(getDeliveryDetails.fulfilled, (state, action) => {\n        state.deliveryStatus = \"idle\";\n        deliveryListAdapter.setOne(state.data as any, action);\n      })\n      .addCase(getDeliveryDetails.rejected, (state, action) => {\n        state.deliveryStatus = \"failed\";\n      })\n      .addCase(setDeliveryStatus.pending, (state) => {\n        state.deliveryStatus = \"loading\";\n      })\n      .addCase(setDeliveryStatus.fulfilled, (state, action) => {\n        // TODO: Remove hack when API issue (not returning submitted data properly) is resolved\n        const status = action.meta.arg.status \n        const id = action.meta.arg.deliveryId \n        action.payload = {id,  status}\n        // hack ends\n        state.deliveryStatus = \"idle\";\n        state.activeDeliveryId = null;\n        \n        deliveryListAdapter.upsertOne(state.data as any, action);\n      })\n      .addCase(setDeliveryStatus.rejected, (state, action) => {\n        state.deliveryStatus = \"failed\";\n      });\n  },\n});\n\nexport default deliveryListSlice.reducer;\n\n// actions\nexport const { setActiveDelivery, resetActiveDelivery } =\n  deliveryListSlice.actions;\n"
        }
    ]
}